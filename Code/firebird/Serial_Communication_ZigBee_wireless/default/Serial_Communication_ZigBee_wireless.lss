
Serial_Communication_ZigBee_wireless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800200  0000361e  000036b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000361e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080030e  0080030e  000037c0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004cb  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcf  00000000  00000000  00003cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000203  00000000  00000000  00004a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001352  00000000  00000000  00004c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00005fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000528  00000000  00000000  000062a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_5>
      18:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e1       	ldi	r30, 0x1E	; 30
      fc:	f6 e3       	ldi	r31, 0x36	; 54
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 30       	cpi	r26, 0x0E	; 14
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ae e0       	ldi	r26, 0x0E	; 14
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 34       	cpi	r26, 0x4C	; 76
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <main>
     122:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 3a 03 	sts	0x033A, r25
    12ec:	80 93 39 03 	sts	0x0339, r24
		lcd_wr_char(million);
    12f0:	80 91 39 03 	lds	r24, 0x0339
    12f4:	90 91 3a 03 	lds	r25, 0x033A
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 3c 03 	sts	0x033C, r25
    1324:	80 93 3b 03 	sts	0x033B, r24
		thousand = temp%10 + 48;
    1328:	80 91 3b 03 	lds	r24, 0x033B
    132c:	90 91 3c 03 	lds	r25, 0x033C
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 4b 03 	sts	0x034B, r25
    1340:	80 93 4a 03 	sts	0x034A, r24
		lcd_wr_char(thousand);
    1344:	80 91 4a 03 	lds	r24, 0x034A
    1348:	90 91 4b 03 	lds	r25, 0x034B
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 3c 03 	sts	0x033C, r25
    1378:	80 93 3b 03 	sts	0x033B, r24
		hundred = temp%10 + 48;
    137c:	80 91 3b 03 	lds	r24, 0x033B
    1380:	90 91 3c 03 	lds	r25, 0x033C
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 47 03 	sts	0x0347, r25
    1394:	80 93 46 03 	sts	0x0346, r24
		lcd_wr_char(hundred);
    1398:	80 91 46 03 	lds	r24, 0x0346
    139c:	90 91 47 03 	lds	r25, 0x0347
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 3c 03 	sts	0x033C, r25
    13cc:	80 93 3b 03 	sts	0x033B, r24
		tens = temp%10 + 48;
    13d0:	80 91 3b 03 	lds	r24, 0x033B
    13d4:	90 91 3c 03 	lds	r25, 0x033C
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 41 03 	sts	0x0341, r25
    13e8:	80 93 40 03 	sts	0x0340, r24
		lcd_wr_char(tens);
    13ec:	80 91 40 03 	lds	r24, 0x0340
    13f0:	90 91 41 03 	lds	r25, 0x0341
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 49 03 	sts	0x0349, r25
    1420:	80 93 48 03 	sts	0x0348, r24
		lcd_wr_char(unit);
    1424:	80 91 48 03 	lds	r24, 0x0348
    1428:	90 91 49 03 	lds	r25, 0x0349
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <timer1_init>:
				  				{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode
 	TCCR1C = 0x00;
 	TCCR1B = 0x0C; 				WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
*/
void timer1_init(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 	TCCR1B = 0x00; 				//stop
    145a:	e1 e8       	ldi	r30, 0x81	; 129
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
 	TCNT1H = 0xFC; 				//Counter high value to which OCR1xH value is to be compared with
    1460:	e5 e8       	ldi	r30, 0x85	; 133
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8c ef       	ldi	r24, 0xFC	; 252
    1466:	80 83       	st	Z, r24
 	TCNT1L = 0x01;				//Counter low value to which OCR1xH value is to be compared with
    1468:	e4 e8       	ldi	r30, 0x84	; 132
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 83       	st	Z, r24
 	OCR1AH = 0x03;				//Output compare eegister high value for servo 1
    1470:	e9 e8       	ldi	r30, 0x89	; 137
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	80 83       	st	Z, r24
 	OCR1AL = 0xFF;				//Output Compare Register low Value For servo 1
    1478:	e8 e8       	ldi	r30, 0x88	; 136
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	80 83       	st	Z, r24
 	OCR1BH = 0x03;				//Output compare eegister high value for servo 2
    1480:	eb e8       	ldi	r30, 0x8B	; 139
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	80 83       	st	Z, r24
 	OCR1BL = 0xFF;				//Output Compare Register low Value For servo 2
    1488:	ea e8       	ldi	r30, 0x8A	; 138
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	80 83       	st	Z, r24
 	OCR1CH = 0x03;				///Output compare eegister high value for servo 3
    1490:	ed e8       	ldi	r30, 0x8D	; 141
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	80 83       	st	Z, r24
 	OCR1CL = 0xFF;				//Output Compare Register low Value For servo 3
    1498:	ec e8       	ldi	r30, 0x8C	; 140
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	80 83       	st	Z, r24
 	ICR1H  = 0x03;	
    14a0:	e7 e8       	ldi	r30, 0x87	; 135
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	80 83       	st	Z, r24
 	ICR1L  = 0xFF;
    14a8:	e6 e8       	ldi	r30, 0x86	; 134
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	80 83       	st	Z, r24
 	TCCR1A = 0xAB; 				/*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    14b0:	e0 e8       	ldi	r30, 0x80	; 128
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b ea       	ldi	r24, 0xAB	; 171
    14b6:	80 83       	st	Z, r24
 									For Overriding normal port functionalit to OCRnA outputs.
				  				{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 	TCCR1C = 0x00;
    14b8:	e2 e8       	ldi	r30, 0x82	; 130
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
 	TCCR1B = 0x0C; 				//WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    14be:	e1 e8       	ldi	r30, 0x81	; 129
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8c e0       	ldi	r24, 0x0C	; 12
    14c4:	80 83       	st	Z, r24
}
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <servo1_pin_config>:

/*
function to configure pin 5 for servo motor 1 operation
*/
void servo1_pin_config (void)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x20;  		//making PORTB 5 pin output
    14d4:	a4 e2       	ldi	r26, 0x24	; 36
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e4 e2       	ldi	r30, 0x24	; 36
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 62       	ori	r24, 0x20	; 32
    14e0:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x20; 		//setting PORTB 5 pin to logic 1
    14e2:	a5 e2       	ldi	r26, 0x25	; 37
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e5 e2       	ldi	r30, 0x25	; 37
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 62       	ori	r24, 0x20	; 32
    14ee:	8c 93       	st	X, r24
}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <servo2_pin_config>:

/*
function to configure pin 6 for servo motor 2 operation
*/
void servo2_pin_config (void)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x40;  		//making PORTB 6 pin output
    14fe:	a4 e2       	ldi	r26, 0x24	; 36
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e4 e2       	ldi	r30, 0x24	; 36
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 64       	ori	r24, 0x40	; 64
    150a:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x40; 		//setting PORTB 6 pin to logic 1
    150c:	a5 e2       	ldi	r26, 0x25	; 37
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e2       	ldi	r30, 0x25	; 37
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8c 93       	st	X, r24
}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <servo3_pin_config>:

/*
function to configure pin 7 for servo motor 3 operation
*/
void servo3_pin_config (void)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x80;  		//making PORTB 7 pin output
    1528:	a4 e2       	ldi	r26, 0x24	; 36
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e4 e2       	ldi	r30, 0x24	; 36
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 68       	ori	r24, 0x80	; 128
    1534:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x80; 		//setting PORTB 7 pin to logic 1
    1536:	a5 e2       	ldi	r26, 0x25	; 37
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e2       	ldi	r30, 0x25	; 37
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <servo_1_free>:
/*servo_free functions unlocks the servo motors from the any angle 
and make them free by giving 100% duty cycle at the PWM. This function can be used to 
reduce the power consumption of the motor if it is holding load against the gravity.
*/
void servo_1_free (void) 	//makes servo 1 free rotating
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
 	OCR1AH = 0x03; 
    1552:	e9 e8       	ldi	r30, 0x89	; 137
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	80 83       	st	Z, r24
 	OCR1AL = 0xFF; 			//Servo 1 off
    155a:	e8 e8       	ldi	r30, 0x88	; 136
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	80 83       	st	Z, r24
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <servo_2_free>:

void servo_2_free (void) 	//makes servo 2 free rotating
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
 	OCR1BH = 0x03;
    1570:	eb e8       	ldi	r30, 0x8B	; 139
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	80 83       	st	Z, r24
 	OCR1BL = 0xFF; 			//Servo 2 off
    1578:	ea e8       	ldi	r30, 0x8A	; 138
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	80 83       	st	Z, r24
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <servo_3_free>:

void servo_3_free (void) 	//makes servo 3 free rotating
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
 	OCR1CH = 0x03;
    158e:	ed e8       	ldi	r30, 0x8D	; 141
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	80 83       	st	Z, r24
 	OCR1CL = 0xFF; 			//Servo 3 off
    1596:	ec e8       	ldi	r30, 0x8C	; 140
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	80 83       	st	Z, r24
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <servo_1>:

/*
Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
*/
void servo_1(unsigned char degrees)  
{
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <servo_1+0xa>
    15ae:	0f 92       	push	r0
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionPanServo = 0;
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e0       	ldi	r26, 0x00	; 0
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	ab 83       	std	Y+3, r26	; 0x03
    15c6:	bc 83       	std	Y+4, r27	; 0x04
 	PositionPanServo = ((float)degrees / 1.86) + 35.0;
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	2b e7       	ldi	r18, 0x7B	; 123
    15e4:	34 e1       	ldi	r19, 0x14	; 20
    15e6:	4e ee       	ldi	r20, 0xEE	; 238
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__divsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4c e0       	ldi	r20, 0x0C	; 12
    15fc:	52 e4       	ldi	r21, 0x42	; 66
    15fe:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__addsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	ab 83       	std	Y+3, r26	; 0x03
    160c:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1AH = 0x00;
    160e:	e9 e8       	ldi	r30, 0x89	; 137
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	10 82       	st	Z, r1
 	OCR1AL = (unsigned char) PositionPanServo;
    1614:	08 e8       	ldi	r16, 0x88	; 136
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	69 81       	ldd	r22, Y+1	; 0x01
    161a:	7a 81       	ldd	r23, Y+2	; 0x02
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	f8 01       	movw	r30, r16
    162a:	80 83       	st	Z, r24
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	08 95       	ret

00001640 <servo_2>:


/*Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees*/
void servo_2(unsigned char degrees)
{
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <servo_2+0xa>
    164a:	0f 92       	push	r0
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	ab 83       	std	Y+3, r26	; 0x03
    1662:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	2b e7       	ldi	r18, 0x7B	; 123
    1680:	34 e1       	ldi	r19, 0x14	; 20
    1682:	4e ee       	ldi	r20, 0xEE	; 238
    1684:	5f e3       	ldi	r21, 0x3F	; 63
    1686:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__divsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4c e0       	ldi	r20, 0x0C	; 12
    1698:	52 e4       	ldi	r21, 0x42	; 66
    169a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__addsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	ab 83       	std	Y+3, r26	; 0x03
    16a8:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1BH = 0x00;
    16aa:	eb e8       	ldi	r30, 0x8B	; 139
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1
 	OCR1BL = (unsigned char) PositionTiltServo;
    16b0:	0a e8       	ldi	r16, 0x8A	; 138
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	69 81       	ldd	r22, Y+1	; 0x01
    16b6:	7a 81       	ldd	r23, Y+2	; 0x02
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	08 95       	ret

000016dc <servo_3>:


/*Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees*/
void servo_3(unsigned char degrees)
{
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <servo_3+0xa>
    16e6:	0f 92       	push	r0
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e0       	ldi	r26, 0x00	; 0
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	ab 83       	std	Y+3, r26	; 0x03
    16fe:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 e0       	ldi	r26, 0x00	; 0
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	2b e7       	ldi	r18, 0x7B	; 123
    171c:	34 e1       	ldi	r19, 0x14	; 20
    171e:	4e ee       	ldi	r20, 0xEE	; 238
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__divsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4c e0       	ldi	r20, 0x0C	; 12
    1734:	52 e4       	ldi	r21, 0x42	; 66
    1736:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__addsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	ab 83       	std	Y+3, r26	; 0x03
    1744:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1CH = 0x00;
    1746:	ed e8       	ldi	r30, 0x8D	; 141
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	10 82       	st	Z, r1
 	OCR1CL = (unsigned char) PositionTiltServo;
    174c:	0c e8       	ldi	r16, 0x8C	; 140
    174e:	10 e0       	ldi	r17, 0x00	; 0
    1750:	69 81       	ldd	r22, Y+1	; 0x01
    1752:	7a 81       	ldd	r23, Y+2	; 0x02
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	f8 01       	movw	r30, r16
    1762:	80 83       	st	Z, r24
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	08 95       	ret

00001778 <port_init_servo>:

/*
Configure all servo pins
*/
void port_init_servo(void)
{ 
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); 		//Configure PORTB 5 pin for servo motor 1 operation
    1780:	0e 94 66 0a 	call	0x14cc	; 0x14cc <servo1_pin_config>
 	servo2_pin_config(); 		//Configure PORTB 6 pin for servo motor 2 operation 
    1784:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <servo2_pin_config>
 	servo3_pin_config(); 		//Configure PORTB 7 pin for servo motor 3 operation  
    1788:	0e 94 90 0a 	call	0x1520	; 0x1520 <servo3_pin_config>
}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <lcd_port_config>:

/*
Pin configuration for firebird LCD operation
*/
void lcd_port_config (void)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    179a:	a7 e2       	ldi	r26, 0x27	; 39
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e7 e2       	ldi	r30, 0x27	; 39
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	87 6f       	ori	r24, 0xF7	; 247
    17a6:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    17a8:	a8 e2       	ldi	r26, 0x28	; 40
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e8 e2       	ldi	r30, 0x28	; 40
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	80 78       	andi	r24, 0x80	; 128
    17b4:	8c 93       	st	X, r24
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    17c4:	a7 e2       	ldi	r26, 0x27	; 39
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e7 e2       	ldi	r30, 0x27	; 39
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	88 60       	ori	r24, 0x08	; 8
    17d0:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    17d2:	a8 e2       	ldi	r26, 0x28	; 40
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e8 e2       	ldi	r30, 0x28	; 40
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	87 7f       	andi	r24, 0xF7	; 247
    17de:	8c 93       	st	X, r24
}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <left_encoder_pin_config>:

/*
Function to configure INT4 (PORTE 4) pin as input for the left position encoder
*/
void left_encoder_pin_config (void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17ee:	ad e2       	ldi	r26, 0x2D	; 45
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ed e2       	ldi	r30, 0x2D	; 45
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7e       	andi	r24, 0xEF	; 239
    17fa:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
    17fc:	ae e2       	ldi	r26, 0x2E	; 46
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ee e2       	ldi	r30, 0x2E	; 46
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 61       	ori	r24, 0x10	; 16
    1808:	8c 93       	st	X, r24
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <right_encoder_pin_config>:

/*
Function to configure INT5 (PORTE 5) pin as input for the right position encoder
*/
void right_encoder_pin_config (void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 5 pin as input
    1818:	ad e2       	ldi	r26, 0x2D	; 45
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	ed e2       	ldi	r30, 0x2D	; 45
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8f 7d       	andi	r24, 0xDF	; 223
    1824:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 5 pin
    1826:	ae e2       	ldi	r26, 0x2E	; 46
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	ee e2       	ldi	r30, 0x2E	; 46
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	8c 93       	st	X, r24
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <motion_pin_config>:

/*
Configuration of motor pins
*/
void motion_pin_config (void)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	0f 92       	push	r0
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1844:	a1 e2       	ldi	r26, 0x21	; 33
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e1 e2       	ldi	r30, 0x21	; 33
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8f 60       	ori	r24, 0x0F	; 15
    1850:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1852:	a2 e2       	ldi	r26, 0x22	; 34
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e2 e2       	ldi	r30, 0x22	; 34
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 7f       	andi	r24, 0xF0	; 240
    185e:	8c 93       	st	X, r24
 DDRE = 0x0F | 0x0F;
    1860:	ed e2       	ldi	r30, 0x2D	; 45
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8f e0       	ldi	r24, 0x0F	; 15
    1866:	80 83       	st	Z, r24
 PORTE = PORTE & 0x00; 
    1868:	ee e2       	ldi	r30, 0x2E	; 46
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	ee e2       	ldi	r30, 0x2E	; 46
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	10 82       	st	Z, r1
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1874:	aa e0       	ldi	r26, 0x0A	; 10
    1876:	b1 e0       	ldi	r27, 0x01	; 1
    1878:	ea e0       	ldi	r30, 0x0A	; 10
    187a:	f1 e0       	ldi	r31, 0x01	; 1
    187c:	80 81       	ld	r24, Z
    187e:	88 61       	ori	r24, 0x18	; 24
    1880:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1882:	ab e0       	ldi	r26, 0x0B	; 11
    1884:	b1 e0       	ldi	r27, 0x01	; 1
    1886:	eb e0       	ldi	r30, 0x0B	; 11
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	80 81       	ld	r24, Z
    188c:	88 61       	ori	r24, 0x18	; 24
    188e:	8c 93       	st	X, r24
}
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    18a0:	e0 e3       	ldi	r30, 0x30	; 48
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	10 82       	st	Z, r1
 PORTF = 0x00;
    18a6:	e1 e3       	ldi	r30, 0x31	; 49
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	10 82       	st	Z, r1
 DDRK = 0x00;
    18ac:	e7 e0       	ldi	r30, 0x07	; 7
    18ae:	f1 e0       	ldi	r31, 0x01	; 1
    18b0:	10 82       	st	Z, r1
 PORTK = 0x00;
    18b2:	e8 e0       	ldi	r30, 0x08	; 8
    18b4:	f1 e0       	ldi	r31, 0x01	; 1
    18b6:	10 82       	st	Z, r1
}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <port_init>:

/*
Function to initialize ports
*/
void port_init()
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	adc_pin_config();
    18c6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <adc_pin_config>
	motion_pin_config();
    18ca:	0e 94 1d 0c 	call	0x183a	; 0x183a <motion_pin_config>
	buzzer_pin_config();
    18ce:	0e 94 de 0b 	call	0x17bc	; 0x17bc <buzzer_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    18d2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <left_encoder_pin_config>
	right_encoder_pin_config(); 	
    18d6:	0e 94 08 0c 	call	0x1810	; 0x1810 <right_encoder_pin_config>
	lcd_port_config();
    18da:	0e 94 c9 0b 	call	0x1792	; 0x1792 <lcd_port_config>
}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <buzzer_on>:

void buzzer_on (void)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	0f 92       	push	r0
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    18ee:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    18f0:	e6 e2       	ldi	r30, 0x26	; 38
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 60       	ori	r24, 0x08	; 8
    18fc:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    18fe:	e8 e2       	ldi	r30, 0x28	; 40
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	80 83       	st	Z, r24
}
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <buzzer_off>:

void buzzer_off (void)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1918:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    191a:	e6 e2       	ldi	r30, 0x26	; 38
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1928:	e8 e2       	ldi	r30, 0x28	; 40
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	80 83       	st	Z, r24
}
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <uart0_init>:
 actual baud rate:9600 (error 0.0%)
 char size: 8 bit
 parity: Disabled
*/
 void uart0_init(void)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1940:	e1 ec       	ldi	r30, 0xC1	; 193
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1946:	e0 ec       	ldi	r30, 0xC0	; 192
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    194c:	e2 ec       	ldi	r30, 0xC2	; 194
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
    1954:	e4 ec       	ldi	r30, 0xC4	; 196
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	8f e5       	ldi	r24, 0x5F	; 95
    195a:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    195c:	e5 ec       	ldi	r30, 0xC5	; 197
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    1962:	e1 ec       	ldi	r30, 0xC1	; 193
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	88 e9       	ldi	r24, 0x98	; 152
    1968:	80 83       	st	Z, r24
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <left_position_encoder_interrupt_init>:

/*
Left position encoder pin setup
*/
void left_position_encoder_interrupt_init(void)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
	cli();
    1978:	f8 94       	cli
	EICRB = EICRB | 0x02;
    197a:	aa e6       	ldi	r26, 0x6A	; 106
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ea e6       	ldi	r30, 0x6A	; 106
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	82 60       	ori	r24, 0x02	; 2
    1986:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10;
    1988:	ad e3       	ldi	r26, 0x3D	; 61
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ed e3       	ldi	r30, 0x3D	; 61
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 61       	ori	r24, 0x10	; 16
    1994:	8c 93       	st	X, r24
	sei();
    1996:	78 94       	sei
}
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <right_position_encoder_interrupt_init>:

/*
Right position encoder pin setup
*/
void right_position_encoder_interrupt_init(void)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	cli();
    19a6:	f8 94       	cli
	EICRB = EICRB | 0x08;
    19a8:	aa e6       	ldi	r26, 0x6A	; 106
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea e6       	ldi	r30, 0x6A	; 106
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 60       	ori	r24, 0x08	; 8
    19b4:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20;
    19b6:	ad e3       	ldi	r26, 0x3D	; 61
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ed e3       	ldi	r30, 0x3D	; 61
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 62       	ori	r24, 0x20	; 32
    19c2:	8c 93       	st	X, r24
	sei();
    19c4:	78 94       	sei
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <get_count>:

/*
Function to return the no. of motor slots to move given an angle in radians
*/
int get_count(unsigned int angle)
{
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	2c 97       	sbiw	r28, 0x0c	; 12
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	9c 87       	std	Y+12, r25	; 0x0c
    19ea:	8b 87       	std	Y+11, r24	; 0x0b
	float arcDist = (angle*(3.14/180)) * BotRadius; //distance travelled by the wheels = radius * angle;
    19ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f0:	cc 01       	movw	r24, r24
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	27 ea       	ldi	r18, 0xA7	; 167
    1a08:	37 ee       	ldi	r19, 0xE7	; 231
    1a0a:	4e e8       	ldi	r20, 0x8E	; 142
    1a0c:	5c e3       	ldi	r21, 0x3C	; 60
    1a0e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	7c 01       	movw	r14, r24
    1a18:	8d 01       	movw	r16, r26
    1a1a:	80 91 00 02 	lds	r24, 0x0200
    1a1e:	90 91 01 02 	lds	r25, 0x0201
    1a22:	aa 27       	eor	r26, r26
    1a24:	97 fd       	sbrc	r25, 7
    1a26:	a0 95       	com	r26
    1a28:	ba 2f       	mov	r27, r26
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1a32:	9b 01       	movw	r18, r22
    1a34:	ac 01       	movw	r20, r24
    1a36:	c8 01       	movw	r24, r16
    1a38:	b7 01       	movw	r22, r14
    1a3a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8f 83       	std	Y+7, r24	; 0x07
    1a44:	98 87       	std	Y+8, r25	; 0x08
    1a46:	a9 87       	std	Y+9, r26	; 0x09
    1a48:	ba 87       	std	Y+10, r27	; 0x0a
	float wheelCircum = 2 * 3.14 * WheelRadius;
    1a4a:	80 91 02 02 	lds	r24, 0x0202
    1a4e:	90 91 03 02 	lds	r25, 0x0203
    1a52:	a0 91 04 02 	lds	r26, 0x0204
    1a56:	b0 91 05 02 	lds	r27, 0x0205
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	23 ec       	ldi	r18, 0xC3	; 195
    1a60:	35 ef       	ldi	r19, 0xF5	; 245
    1a62:	48 ec       	ldi	r20, 0xC8	; 200
    1a64:	50 e4       	ldi	r21, 0x40	; 64
    1a66:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	ad 83       	std	Y+5, r26	; 0x05
    1a74:	be 83       	std	Y+6, r27	; 0x06
	int count = (30 * arcDist) / wheelCircum;
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 ef       	ldi	r20, 0xF0	; 240
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	4d 81       	ldd	r20, Y+5	; 0x05
    1a98:	5e 81       	ldd	r21, Y+6	; 0x06
    1a9a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__divsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 00 18 	call	0x3000	; 0x3000 <__fixsfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	return count;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1ab6:	2c 96       	adiw	r28, 0x0c	; 12
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	08 95       	ret

00001ad0 <rotate_left_hard>:

/*
Left hard rotation
*/
void rotate_left_hard(unsigned int count)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <rotate_left_hard+0x6>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <rotate_left_hard+0x8>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	1a 82       	std	Y+2, r1	; 0x02
    1ae4:	1b 82       	std	Y+3, r1	; 0x03
    1ae6:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int)count;
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	cc 01       	movw	r24, r24
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	ab 83       	std	Y+3, r26	; 0x03
    1af8:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1afa:	10 92 12 03 	sts	0x0312, r1
    1afe:	10 92 13 03 	sts	0x0313, r1
    1b02:	10 92 14 03 	sts	0x0314, r1
    1b06:	10 92 15 03 	sts	0x0315, r1
    1b0a:	80 91 12 03 	lds	r24, 0x0312
    1b0e:	90 91 13 03 	lds	r25, 0x0313
    1b12:	a0 91 14 03 	lds	r26, 0x0314
    1b16:	b0 91 15 03 	lds	r27, 0x0315
    1b1a:	80 93 0e 03 	sts	0x030E, r24
    1b1e:	90 93 0f 03 	sts	0x030F, r25
    1b22:	a0 93 10 03 	sts	0x0310, r26
    1b26:	b0 93 11 03 	sts	0x0311, r27
	PORTA = 0x05;
    1b2a:	e2 e2       	ldi	r30, 0x22	; 34
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	85 e0       	ldi	r24, 0x05	; 5
    1b30:	80 83       	st	Z, r24
	while(1){
	lcd_print(1,1,ShaftCountLeft,4);
    1b32:	80 91 0e 03 	lds	r24, 0x030E
    1b36:	90 91 0f 03 	lds	r25, 0x030F
    1b3a:	a0 91 10 03 	lds	r26, 0x0310
    1b3e:	b0 91 11 03 	lds	r27, 0x0311
    1b42:	9c 01       	movw	r18, r24
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	a9 01       	movw	r20, r18
    1b4a:	24 e0       	ldi	r18, 0x04	; 4
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountLeft > ReqdShaftCount){
    1b52:	20 91 0e 03 	lds	r18, 0x030E
    1b56:	30 91 0f 03 	lds	r19, 0x030F
    1b5a:	40 91 10 03 	lds	r20, 0x0310
    1b5e:	50 91 11 03 	lds	r21, 0x0311
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	ab 81       	ldd	r26, Y+3	; 0x03
    1b68:	bc 81       	ldd	r27, Y+4	; 0x04
    1b6a:	82 17       	cp	r24, r18
    1b6c:	93 07       	cpc	r25, r19
    1b6e:	a4 07       	cpc	r26, r20
    1b70:	b5 07       	cpc	r27, r21
    1b72:	f8 f6       	brcc	.-66     	; 0x1b32 <rotate_left_hard+0x62>
			break;
		}
	}
	PORTA=0x00;
    1b74:	e2 e2       	ldi	r30, 0x22	; 34
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	10 82       	st	Z, r1
	flag4=0;
    1b7a:	10 92 1b 03 	sts	0x031B, r1
    1b7e:	10 92 1a 03 	sts	0x031A, r1
}
    1b82:	26 96       	adiw	r28, 0x06	; 6
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <rotate_left_soft>:

/*
Left soft rotation
*/
void rotate_left_soft(unsigned int count)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <rotate_left_soft+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <rotate_left_soft+0x8>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	1b 82       	std	Y+3, r1	; 0x03
    1baa:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int)count;
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	cc 01       	movw	r24, r24
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	ab 83       	std	Y+3, r26	; 0x03
    1bbc:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1bbe:	10 92 12 03 	sts	0x0312, r1
    1bc2:	10 92 13 03 	sts	0x0313, r1
    1bc6:	10 92 14 03 	sts	0x0314, r1
    1bca:	10 92 15 03 	sts	0x0315, r1
    1bce:	80 91 12 03 	lds	r24, 0x0312
    1bd2:	90 91 13 03 	lds	r25, 0x0313
    1bd6:	a0 91 14 03 	lds	r26, 0x0314
    1bda:	b0 91 15 03 	lds	r27, 0x0315
    1bde:	80 93 0e 03 	sts	0x030E, r24
    1be2:	90 93 0f 03 	sts	0x030F, r25
    1be6:	a0 93 10 03 	sts	0x0310, r26
    1bea:	b0 93 11 03 	sts	0x0311, r27
	PORTA = 0x04;
    1bee:	e2 e2       	ldi	r30, 0x22	; 34
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	84 e0       	ldi	r24, 0x04	; 4
    1bf4:	80 83       	st	Z, r24
	while(1){
		lcd_print(1,1,angledata,4);
    1bf6:	20 91 16 03 	lds	r18, 0x0316
    1bfa:	30 91 17 03 	lds	r19, 0x0317
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	a9 01       	movw	r20, r18
    1c04:	24 e0       	ldi	r18, 0x04	; 4
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountRight > ReqdShaftCount){
    1c0c:	20 91 12 03 	lds	r18, 0x0312
    1c10:	30 91 13 03 	lds	r19, 0x0313
    1c14:	40 91 14 03 	lds	r20, 0x0314
    1c18:	50 91 15 03 	lds	r21, 0x0315
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	ab 81       	ldd	r26, Y+3	; 0x03
    1c22:	bc 81       	ldd	r27, Y+4	; 0x04
    1c24:	82 17       	cp	r24, r18
    1c26:	93 07       	cpc	r25, r19
    1c28:	a4 07       	cpc	r26, r20
    1c2a:	b5 07       	cpc	r27, r21
    1c2c:	20 f7       	brcc	.-56     	; 0x1bf6 <rotate_left_soft+0x62>
			break;
		}
	}
	PORTA=0x00;
    1c2e:	e2 e2       	ldi	r30, 0x22	; 34
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	10 82       	st	Z, r1
	flag7=0;
    1c34:	10 92 1f 03 	sts	0x031F, r1
    1c38:	10 92 1e 03 	sts	0x031E, r1
}
    1c3c:	26 96       	adiw	r28, 0x06	; 6
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <rotate_right_hard>:

/*
Right hard rotation
*/
void rotate_right_hard(unsigned int count)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <rotate_right_hard+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <rotate_right_hard+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
    1c60:	1a 82       	std	Y+2, r1	; 0x02
    1c62:	1b 82       	std	Y+3, r1	; 0x03
    1c64:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int) count;
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	cc 01       	movw	r24, r24
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	ab 83       	std	Y+3, r26	; 0x03
    1c76:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1c78:	10 92 12 03 	sts	0x0312, r1
    1c7c:	10 92 13 03 	sts	0x0313, r1
    1c80:	10 92 14 03 	sts	0x0314, r1
    1c84:	10 92 15 03 	sts	0x0315, r1
    1c88:	80 91 12 03 	lds	r24, 0x0312
    1c8c:	90 91 13 03 	lds	r25, 0x0313
    1c90:	a0 91 14 03 	lds	r26, 0x0314
    1c94:	b0 91 15 03 	lds	r27, 0x0315
    1c98:	80 93 0e 03 	sts	0x030E, r24
    1c9c:	90 93 0f 03 	sts	0x030F, r25
    1ca0:	a0 93 10 03 	sts	0x0310, r26
    1ca4:	b0 93 11 03 	sts	0x0311, r27
	PORTA = 0x0A;
    1ca8:	e2 e2       	ldi	r30, 0x22	; 34
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8a e0       	ldi	r24, 0x0A	; 10
    1cae:	80 83       	st	Z, r24
	while(1){
	lcd_print(1,1,angledata,4);
    1cb0:	20 91 16 03 	lds	r18, 0x0316
    1cb4:	30 91 17 03 	lds	r19, 0x0317
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	24 e0       	ldi	r18, 0x04	; 4
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountLeft > ReqdShaftCount){
    1cc6:	20 91 0e 03 	lds	r18, 0x030E
    1cca:	30 91 0f 03 	lds	r19, 0x030F
    1cce:	40 91 10 03 	lds	r20, 0x0310
    1cd2:	50 91 11 03 	lds	r21, 0x0311
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	ab 81       	ldd	r26, Y+3	; 0x03
    1cdc:	bc 81       	ldd	r27, Y+4	; 0x04
    1cde:	82 17       	cp	r24, r18
    1ce0:	93 07       	cpc	r25, r19
    1ce2:	a4 07       	cpc	r26, r20
    1ce4:	b5 07       	cpc	r27, r21
    1ce6:	20 f7       	brcc	.-56     	; 0x1cb0 <rotate_right_hard+0x62>
			break;
		}
	}
		PORTA=0x00;
    1ce8:	e2 e2       	ldi	r30, 0x22	; 34
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	10 82       	st	Z, r1
		flag6=0;
    1cee:	10 92 1d 03 	sts	0x031D, r1
    1cf2:	10 92 1c 03 	sts	0x031C, r1
}
    1cf6:	26 96       	adiw	r28, 0x06	; 6
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <rotate_right_soft>:

/*
Right soft rotation
*/
void rotate_right_soft(unsigned int count)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <rotate_right_soft+0x6>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <rotate_right_soft+0x8>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1d18:	19 82       	std	Y+1, r1	; 0x01
    1d1a:	1a 82       	std	Y+2, r1	; 0x02
    1d1c:	1b 82       	std	Y+3, r1	; 0x03
    1d1e:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int)count;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	cc 01       	movw	r24, r24
    1d26:	a0 e0       	ldi	r26, 0x00	; 0
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	ab 83       	std	Y+3, r26	; 0x03
    1d30:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1d32:	10 92 12 03 	sts	0x0312, r1
    1d36:	10 92 13 03 	sts	0x0313, r1
    1d3a:	10 92 14 03 	sts	0x0314, r1
    1d3e:	10 92 15 03 	sts	0x0315, r1
    1d42:	80 91 12 03 	lds	r24, 0x0312
    1d46:	90 91 13 03 	lds	r25, 0x0313
    1d4a:	a0 91 14 03 	lds	r26, 0x0314
    1d4e:	b0 91 15 03 	lds	r27, 0x0315
    1d52:	80 93 0e 03 	sts	0x030E, r24
    1d56:	90 93 0f 03 	sts	0x030F, r25
    1d5a:	a0 93 10 03 	sts	0x0310, r26
    1d5e:	b0 93 11 03 	sts	0x0311, r27
	PORTA = 0x02;
    1d62:	e2 e2       	ldi	r30, 0x22	; 34
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	80 83       	st	Z, r24
	while(1){
		lcd_print(1,1,ShaftCountLeft,4);
    1d6a:	80 91 0e 03 	lds	r24, 0x030E
    1d6e:	90 91 0f 03 	lds	r25, 0x030F
    1d72:	a0 91 10 03 	lds	r26, 0x0310
    1d76:	b0 91 11 03 	lds	r27, 0x0311
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	a9 01       	movw	r20, r18
    1d82:	24 e0       	ldi	r18, 0x04	; 4
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountLeft > ReqdShaftCount){
    1d8a:	20 91 0e 03 	lds	r18, 0x030E
    1d8e:	30 91 0f 03 	lds	r19, 0x030F
    1d92:	40 91 10 03 	lds	r20, 0x0310
    1d96:	50 91 11 03 	lds	r21, 0x0311
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    1da0:	bc 81       	ldd	r27, Y+4	; 0x04
    1da2:	82 17       	cp	r24, r18
    1da4:	93 07       	cpc	r25, r19
    1da6:	a4 07       	cpc	r26, r20
    1da8:	b5 07       	cpc	r27, r21
    1daa:	f8 f6       	brcc	.-66     	; 0x1d6a <rotate_right_soft+0x62>
			break;
		}
	}
	PORTA=0x00;
    1dac:	e2 e2       	ldi	r30, 0x22	; 34
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	10 82       	st	Z, r1
	flag9=0;
    1db2:	10 92 21 03 	sts	0x0321, r1
    1db6:	10 92 20 03 	sts	0x0320, r1
}
    1dba:	26 96       	adiw	r28, 0x06	; 6
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <adc_init>:

void adc_init()
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1dd4:	ea e7       	ldi	r30, 0x7A	; 122
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1dda:	eb e7       	ldi	r30, 0x7B	; 123
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1de0:	ec e7       	ldi	r30, 0x7C	; 124
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 e2       	ldi	r24, 0x20	; 32
    1de6:	80 83       	st	Z, r24
	ACSR = 0x80;
    1de8:	e0 e5       	ldi	r30, 0x50	; 80
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 e8       	ldi	r24, 0x80	; 128
    1dee:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1df0:	ea e7       	ldi	r30, 0x7A	; 122
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	86 e8       	ldi	r24, 0x86	; 134
    1df6:	80 83       	st	Z, r24
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char Ch) 
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	0f 92       	push	r0
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	88 30       	cpi	r24, 0x08	; 8
    1e10:	20 f0       	brcs	.+8      	; 0x1e1a <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1e12:	eb e7       	ldi	r30, 0x7B	; 123
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	88 e0       	ldi	r24, 0x08	; 8
    1e18:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	87 70       	andi	r24, 0x07	; 7
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1e20:	ec e7       	ldi	r30, 0x7C	; 124
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	80 62       	ori	r24, 0x20	; 32
    1e28:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1e2a:	aa e7       	ldi	r26, 0x7A	; 122
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ea e7       	ldi	r30, 0x7A	; 122
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 64       	ori	r24, 0x40	; 64
    1e36:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1e38:	ea e7       	ldi	r30, 0x7A	; 122
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	80 71       	andi	r24, 0x10	; 16
    1e44:	90 70       	andi	r25, 0x00	; 0
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	b9 f3       	breq	.-18     	; 0x1e38 <ADC_Conversion+0x3a>
	a=ADCH;
    1e4a:	e9 e7       	ldi	r30, 0x79	; 121
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1e52:	aa e7       	ldi	r26, 0x7A	; 122
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	ea e7       	ldi	r30, 0x7A	; 122
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 61       	ori	r24, 0x10	; 16
    1e5e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1e60:	eb e7       	ldi	r30, 0x7B	; 123
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	10 82       	st	Z, r1
	return a;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <print_sensor>:

void print_sensor(char row, char coloumn,unsigned char channel)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <print_sensor+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
    1e80:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <ADC_Conversion>
    1e88:	80 93 3d 03 	sts	0x033D, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1e8c:	80 91 3d 03 	lds	r24, 0x033D
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	6a 81       	ldd	r22, Y+2	; 0x02
    1e98:	a9 01       	movw	r20, r18
    1e9a:	23 e0       	ldi	r18, 0x03	; 3
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <__vector_5>:

/*
Interrupt service routine to detect shaftcountleft
*/
ISR(INT4_vect, ISR_NOBLOCK)
{
    1eae:	78 94       	sei
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;
    1eca:	80 91 0e 03 	lds	r24, 0x030E
    1ece:	90 91 0f 03 	lds	r25, 0x030F
    1ed2:	a0 91 10 03 	lds	r26, 0x0310
    1ed6:	b0 91 11 03 	lds	r27, 0x0311
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	a1 1d       	adc	r26, r1
    1ede:	b1 1d       	adc	r27, r1
    1ee0:	80 93 0e 03 	sts	0x030E, r24
    1ee4:	90 93 0f 03 	sts	0x030F, r25
    1ee8:	a0 93 10 03 	sts	0x0310, r26
    1eec:	b0 93 11 03 	sts	0x0311, r27
	
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	0f 90       	pop	r0
    1f02:	1f 90       	pop	r1
    1f04:	18 95       	reti

00001f06 <__vector_6>:

/*
Interrupt service routine to detect shaftcountright
*/
ISR(INT5_vect, ISR_NOBLOCK)
{
    1f06:	78 94       	sei
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	8f 93       	push	r24
    1f14:	9f 93       	push	r25
    1f16:	af 93       	push	r26
    1f18:	bf 93       	push	r27
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;
    1f22:	80 91 12 03 	lds	r24, 0x0312
    1f26:	90 91 13 03 	lds	r25, 0x0313
    1f2a:	a0 91 14 03 	lds	r26, 0x0314
    1f2e:	b0 91 15 03 	lds	r27, 0x0315
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	a1 1d       	adc	r26, r1
    1f36:	b1 1d       	adc	r27, r1
    1f38:	80 93 12 03 	sts	0x0312, r24
    1f3c:	90 93 13 03 	sts	0x0313, r25
    1f40:	a0 93 14 03 	sts	0x0314, r26
    1f44:	b0 93 15 03 	sts	0x0315, r27

}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	bf 91       	pop	r27
    1f4e:	af 91       	pop	r26
    1f50:	9f 91       	pop	r25
    1f52:	8f 91       	pop	r24
    1f54:	0f 90       	pop	r0
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	0f 90       	pop	r0
    1f5a:	1f 90       	pop	r1
    1f5c:	18 95       	reti

00001f5e <__vector_25>:

/*
Interrupt  service routine to detect signal sent by the wieless module on UDR0
*/
ISR(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{	
    1f5e:	1f 92       	push	r1
    1f60:	0f 92       	push	r0
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	0f 92       	push	r0
    1f66:	00 90 5b 00 	lds	r0, 0x005B
    1f6a:	0f 92       	push	r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	2f 93       	push	r18
    1f70:	3f 93       	push	r19
    1f72:	4f 93       	push	r20
    1f74:	5f 93       	push	r21
    1f76:	6f 93       	push	r22
    1f78:	7f 93       	push	r23
    1f7a:	8f 93       	push	r24
    1f7c:	9f 93       	push	r25
    1f7e:	af 93       	push	r26
    1f80:	bf 93       	push	r27
    1f82:	ef 93       	push	r30
    1f84:	ff 93       	push	r31
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	Front_Sharp_Sensor = ADC_Conversion(11);
    1f8e:	8b e0       	ldi	r24, 0x0B	; 11
    1f90:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <ADC_Conversion>
    1f94:	80 93 37 03 	sts	0x0337, r24
	Front_IR_Sensor = ADC_Conversion(6);
    1f98:	86 e0       	ldi	r24, 0x06	; 6
    1f9a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <ADC_Conversion>
    1f9e:	80 93 38 03 	sts	0x0338, r24
	print_sensor(1,1,11);	//Prints Value of Front Sharp Sensor
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	4b e0       	ldi	r20, 0x0B	; 11
    1fa8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <print_sensor>
	print_sensor(1,5,6);	//Prints Value of Front IR Sensor
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	65 e0       	ldi	r22, 0x05	; 5
    1fb0:	46 e0       	ldi	r20, 0x06	; 6
    1fb2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <print_sensor>
	sensor=0;
    1fb6:	10 92 36 03 	sts	0x0336, r1
	if(Front_IR_Sensor<220 || Front_Sharp_Sensor > 130)
    1fba:	80 91 38 03 	lds	r24, 0x0338
    1fbe:	8c 3d       	cpi	r24, 0xDC	; 220
    1fc0:	20 f0       	brcs	.+8      	; 0x1fca <__vector_25+0x6c>
    1fc2:	80 91 37 03 	lds	r24, 0x0337
    1fc6:	83 38       	cpi	r24, 0x83	; 131
    1fc8:	30 f0       	brcs	.+12     	; 0x1fd6 <__vector_25+0x78>
	{
		sensor=1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 93 36 03 	sts	0x0336, r24
		PORTA=0x00;
    1fd0:	e2 e2       	ldi	r30, 0x22	; 34
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	10 82       	st	Z, r1
	}
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    1fd6:	e6 ec       	ldi	r30, 0xC6	; 198
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	90 93 43 03 	sts	0x0343, r25
    1fe4:	80 93 42 03 	sts	0x0342, r24

	UDR0 = data; 				//echo data back to PC
    1fe8:	e6 ec       	ldi	r30, 0xC6	; 198
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 91 42 03 	lds	r24, 0x0342
    1ff0:	90 91 43 03 	lds	r25, 0x0343
    1ff4:	80 83       	st	Z, r24
	lcd_print(2,1,(char)UDR0,4);
    1ff6:	e6 ec       	ldi	r30, 0xC6	; 198
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	82 e0       	ldi	r24, 0x02	; 2
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	a9 01       	movw	r20, r18
    2006:	24 e0       	ldi	r18, 0x04	; 4
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>

	if(data == 1)
    200e:	80 91 42 03 	lds	r24, 0x0342
    2012:	90 91 43 03 	lds	r25, 0x0343
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	91 05       	cpc	r25, r1
    201a:	39 f4       	brne	.+14     	; 0x202a <__vector_25+0xcc>
	{
		mode = 1;		
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	90 93 19 03 	sts	0x0319, r25
    2024:	80 93 18 03 	sts	0x0318, r24
    2028:	9e c1       	rjmp	.+828    	; 0x2366 <__stack+0x167>
	}
	else if(data == 2)
    202a:	80 91 42 03 	lds	r24, 0x0342
    202e:	90 91 43 03 	lds	r25, 0x0343
    2032:	82 30       	cpi	r24, 0x02	; 2
    2034:	91 05       	cpc	r25, r1
    2036:	39 f4       	brne	.+14     	; 0x2046 <__vector_25+0xe8>
	{
		mode = 2;		
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	90 93 19 03 	sts	0x0319, r25
    2040:	80 93 18 03 	sts	0x0318, r24
    2044:	90 c1       	rjmp	.+800    	; 0x2366 <__stack+0x167>
	}
	else if(data == 3)
    2046:	80 91 42 03 	lds	r24, 0x0342
    204a:	90 91 43 03 	lds	r25, 0x0343
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	91 05       	cpc	r25, r1
    2052:	39 f4       	brne	.+14     	; 0x2062 <__vector_25+0x104>
	{
		mode = 3;		
    2054:	83 e0       	ldi	r24, 0x03	; 3
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	90 93 19 03 	sts	0x0319, r25
    205c:	80 93 18 03 	sts	0x0318, r24
    2060:	82 c1       	rjmp	.+772    	; 0x2366 <__stack+0x167>
	}
	else if(data == 8 && mode==1) //ASCII value of 8
    2062:	80 91 42 03 	lds	r24, 0x0342
    2066:	90 91 43 03 	lds	r25, 0x0343
    206a:	88 30       	cpi	r24, 0x08	; 8
    206c:	91 05       	cpc	r25, r1
    206e:	89 f4       	brne	.+34     	; 0x2092 <__vector_25+0x134>
    2070:	80 91 18 03 	lds	r24, 0x0318
    2074:	90 91 19 03 	lds	r25, 0x0319
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 05       	cpc	r25, r1
    207c:	51 f4       	brne	.+20     	; 0x2092 <__vector_25+0x134>
	{
		if(sensor==0)
    207e:	80 91 36 03 	lds	r24, 0x0336
    2082:	88 23       	and	r24, r24
    2084:	09 f0       	breq	.+2      	; 0x2088 <__vector_25+0x12a>
    2086:	6f c1       	rjmp	.+734    	; 0x2366 <__stack+0x167>
		{
			PORTA=0x06;  //forward
    2088:	e2 e2       	ldi	r30, 0x22	; 34
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	86 e0       	ldi	r24, 0x06	; 6
    208e:	80 83       	st	Z, r24
    2090:	6a c1       	rjmp	.+724    	; 0x2366 <__stack+0x167>
			//lcd_print(1,1,data,4); 
		}
	}
	else if(data == 9 && mode==1) //ASCII value of 2
    2092:	80 91 42 03 	lds	r24, 0x0342
    2096:	90 91 43 03 	lds	r25, 0x0343
    209a:	89 30       	cpi	r24, 0x09	; 9
    209c:	91 05       	cpc	r25, r1
    209e:	61 f4       	brne	.+24     	; 0x20b8 <__vector_25+0x15a>
    20a0:	80 91 18 03 	lds	r24, 0x0318
    20a4:	90 91 19 03 	lds	r25, 0x0319
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	91 05       	cpc	r25, r1
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <__vector_25+0x15a>
	{
		PORTA=0x09; //back
    20ae:	e2 e2       	ldi	r30, 0x22	; 34
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	89 e0       	ldi	r24, 0x09	; 9
    20b4:	80 83       	st	Z, r24
    20b6:	57 c1       	rjmp	.+686    	; 0x2366 <__stack+0x167>
	}
	else if(data == 5 && mode==1) //ASCII value of 5
    20b8:	80 91 42 03 	lds	r24, 0x0342
    20bc:	90 91 43 03 	lds	r25, 0x0343
    20c0:	85 30       	cpi	r24, 0x05	; 5
    20c2:	91 05       	cpc	r25, r1
    20c4:	59 f4       	brne	.+22     	; 0x20dc <__vector_25+0x17e>
    20c6:	80 91 18 03 	lds	r24, 0x0318
    20ca:	90 91 19 03 	lds	r25, 0x0319
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	21 f4       	brne	.+8      	; 0x20dc <__vector_25+0x17e>
	{
		PORTA=0x00; //stop
    20d4:	e2 e2       	ldi	r30, 0x22	; 34
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	10 82       	st	Z, r1
    20da:	45 c1       	rjmp	.+650    	; 0x2366 <__stack+0x167>
	}
	else if(data > 11 && data < 55 && mode==1) //ASCII value of 4
    20dc:	80 91 42 03 	lds	r24, 0x0342
    20e0:	90 91 43 03 	lds	r25, 0x0343
    20e4:	8c 30       	cpi	r24, 0x0C	; 12
    20e6:	91 05       	cpc	r25, r1
    20e8:	6c f1       	brlt	.+90     	; 0x2144 <__vector_25+0x1e6>
    20ea:	80 91 42 03 	lds	r24, 0x0342
    20ee:	90 91 43 03 	lds	r25, 0x0343
    20f2:	87 33       	cpi	r24, 0x37	; 55
    20f4:	91 05       	cpc	r25, r1
    20f6:	34 f5       	brge	.+76     	; 0x2144 <__vector_25+0x1e6>
    20f8:	80 91 18 03 	lds	r24, 0x0318
    20fc:	90 91 19 03 	lds	r25, 0x0319
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	91 05       	cpc	r25, r1
    2104:	f9 f4       	brne	.+62     	; 0x2144 <__vector_25+0x1e6>
	{	lcd_print(1,1,(char)data,4);
    2106:	80 91 42 03 	lds	r24, 0x0342
    210a:	90 91 43 03 	lds	r25, 0x0343
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	a9 01       	movw	r20, r18
    2118:	24 e0       	ldi	r18, 0x04	; 4
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		flag6=1;  //hard right
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	90 93 1d 03 	sts	0x031D, r25
    2128:	80 93 1c 03 	sts	0x031C, r24
		angledata = get_count(data - 10);
    212c:	80 91 42 03 	lds	r24, 0x0342
    2130:	90 91 43 03 	lds	r25, 0x0343
    2134:	0a 97       	sbiw	r24, 0x0a	; 10
    2136:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <get_count>
    213a:	90 93 17 03 	sts	0x0317, r25
    213e:	80 93 16 03 	sts	0x0316, r24
    2142:	11 c1       	rjmp	.+546    	; 0x2366 <__stack+0x167>
	}

	else if(data >= 55 && mode==1) //ASCII value of 6
    2144:	80 91 42 03 	lds	r24, 0x0342
    2148:	90 91 43 03 	lds	r25, 0x0343
    214c:	87 33       	cpi	r24, 0x37	; 55
    214e:	91 05       	cpc	r25, r1
    2150:	34 f1       	brlt	.+76     	; 0x219e <__vector_25+0x240>
    2152:	80 91 18 03 	lds	r24, 0x0318
    2156:	90 91 19 03 	lds	r25, 0x0319
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	91 05       	cpc	r25, r1
    215e:	f9 f4       	brne	.+62     	; 0x219e <__vector_25+0x240>
	{	lcd_print(1,1,(char)data,4);
    2160:	80 91 42 03 	lds	r24, 0x0342
    2164:	90 91 43 03 	lds	r25, 0x0343
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	61 e0       	ldi	r22, 0x01	; 1
    2170:	a9 01       	movw	r20, r18
    2172:	24 e0       	ldi	r18, 0x04	; 4
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		flag4=1; //hard left
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	90 93 1b 03 	sts	0x031B, r25
    2182:	80 93 1a 03 	sts	0x031A, r24
		angledata = get_count(data-55);
    2186:	80 91 42 03 	lds	r24, 0x0342
    218a:	90 91 43 03 	lds	r25, 0x0343
    218e:	c7 97       	sbiw	r24, 0x37	; 55
    2190:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <get_count>
    2194:	90 93 17 03 	sts	0x0317, r25
    2198:	80 93 16 03 	sts	0x0316, r24
    219c:	e4 c0       	rjmp	.+456    	; 0x2366 <__stack+0x167>

	}

	else if(data > 11 && data < 55 && mode==2) //ASCII value of 4
    219e:	80 91 42 03 	lds	r24, 0x0342
    21a2:	90 91 43 03 	lds	r25, 0x0343
    21a6:	8c 30       	cpi	r24, 0x0C	; 12
    21a8:	91 05       	cpc	r25, r1
    21aa:	6c f1       	brlt	.+90     	; 0x2206 <__stack+0x7>
    21ac:	80 91 42 03 	lds	r24, 0x0342
    21b0:	90 91 43 03 	lds	r25, 0x0343
    21b4:	87 33       	cpi	r24, 0x37	; 55
    21b6:	91 05       	cpc	r25, r1
    21b8:	34 f5       	brge	.+76     	; 0x2206 <__stack+0x7>
    21ba:	80 91 18 03 	lds	r24, 0x0318
    21be:	90 91 19 03 	lds	r25, 0x0319
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	91 05       	cpc	r25, r1
    21c6:	f9 f4       	brne	.+62     	; 0x2206 <__stack+0x7>
	{	lcd_print(1,1,(char)data,4);
    21c8:	80 91 42 03 	lds	r24, 0x0342
    21cc:	90 91 43 03 	lds	r25, 0x0343
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	a9 01       	movw	r20, r18
    21da:	24 e0       	ldi	r18, 0x04	; 4
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		flag9=1;  //soft right
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	90 93 21 03 	sts	0x0321, r25
    21ea:	80 93 20 03 	sts	0x0320, r24
		angledata = get_count(data - 10);
    21ee:	80 91 42 03 	lds	r24, 0x0342
    21f2:	90 91 43 03 	lds	r25, 0x0343
    21f6:	0a 97       	sbiw	r24, 0x0a	; 10
    21f8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <get_count>
    21fc:	90 93 17 03 	sts	0x0317, r25
    2200:	80 93 16 03 	sts	0x0316, r24
    2204:	b0 c0       	rjmp	.+352    	; 0x2366 <__stack+0x167>
	}

	else if(data >= 55 && mode==2) //ASCII value of 6
    2206:	80 91 42 03 	lds	r24, 0x0342
    220a:	90 91 43 03 	lds	r25, 0x0343
    220e:	87 33       	cpi	r24, 0x37	; 55
    2210:	91 05       	cpc	r25, r1
    2212:	34 f1       	brlt	.+76     	; 0x2260 <__stack+0x61>
    2214:	80 91 18 03 	lds	r24, 0x0318
    2218:	90 91 19 03 	lds	r25, 0x0319
    221c:	82 30       	cpi	r24, 0x02	; 2
    221e:	91 05       	cpc	r25, r1
    2220:	f9 f4       	brne	.+62     	; 0x2260 <__stack+0x61>
	{	lcd_print(1,1,(char)data,4);
    2222:	80 91 42 03 	lds	r24, 0x0342
    2226:	90 91 43 03 	lds	r25, 0x0343
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	a9 01       	movw	r20, r18
    2234:	24 e0       	ldi	r18, 0x04	; 4
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		flag7=1; //soft left
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	90 93 1f 03 	sts	0x031F, r25
    2244:	80 93 1e 03 	sts	0x031E, r24
		angledata = get_count(data-55);
    2248:	80 91 42 03 	lds	r24, 0x0342
    224c:	90 91 43 03 	lds	r25, 0x0343
    2250:	c7 97       	sbiw	r24, 0x37	; 55
    2252:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <get_count>
    2256:	90 93 17 03 	sts	0x0317, r25
    225a:	80 93 16 03 	sts	0x0316, r24
    225e:	83 c0       	rjmp	.+262    	; 0x2366 <__stack+0x167>

	}
	else if(mode==3 && data >= 90)
    2260:	80 91 18 03 	lds	r24, 0x0318
    2264:	90 91 19 03 	lds	r25, 0x0319
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	91 05       	cpc	r25, r1
    226c:	09 f0       	breq	.+2      	; 0x2270 <__stack+0x71>
    226e:	3e c0       	rjmp	.+124    	; 0x22ec <__stack+0xed>
    2270:	80 91 42 03 	lds	r24, 0x0342
    2274:	90 91 43 03 	lds	r25, 0x0343
    2278:	8a 35       	cpi	r24, 0x5A	; 90
    227a:	91 05       	cpc	r25, r1
    227c:	bc f1       	brlt	.+110    	; 0x22ec <__stack+0xed>
	{
		data=data-90;
    227e:	80 91 42 03 	lds	r24, 0x0342
    2282:	90 91 43 03 	lds	r25, 0x0343
    2286:	8a 55       	subi	r24, 0x5A	; 90
    2288:	90 40       	sbci	r25, 0x00	; 0
    228a:	90 93 43 03 	sts	0x0343, r25
    228e:	80 93 42 03 	sts	0x0342, r24
		if(angle2-data>2 || angle2-data<-2)
    2292:	20 91 2c 03 	lds	r18, 0x032C
    2296:	30 91 2d 03 	lds	r19, 0x032D
    229a:	80 91 42 03 	lds	r24, 0x0342
    229e:	90 91 43 03 	lds	r25, 0x0343
    22a2:	a9 01       	movw	r20, r18
    22a4:	48 1b       	sub	r20, r24
    22a6:	59 0b       	sbc	r21, r25
    22a8:	ca 01       	movw	r24, r20
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	91 05       	cpc	r25, r1
    22ae:	7c f4       	brge	.+30     	; 0x22ce <__stack+0xcf>
    22b0:	80 91 2c 03 	lds	r24, 0x032C
    22b4:	90 91 2d 03 	lds	r25, 0x032D
    22b8:	20 91 42 03 	lds	r18, 0x0342
    22bc:	30 91 43 03 	lds	r19, 0x0343
    22c0:	82 1b       	sub	r24, r18
    22c2:	93 0b       	sbc	r25, r19
    22c4:	5f ef       	ldi	r21, 0xFF	; 255
    22c6:	8e 3f       	cpi	r24, 0xFE	; 254
    22c8:	95 07       	cpc	r25, r21
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <__stack+0xcf>
    22cc:	4c c0       	rjmp	.+152    	; 0x2366 <__stack+0x167>
		{
				servo_3(data);
    22ce:	80 91 42 03 	lds	r24, 0x0342
    22d2:	90 91 43 03 	lds	r25, 0x0343
    22d6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <servo_3>
				angle2=data;
    22da:	80 91 42 03 	lds	r24, 0x0342
    22de:	90 91 43 03 	lds	r25, 0x0343
    22e2:	90 93 2d 03 	sts	0x032D, r25
    22e6:	80 93 2c 03 	sts	0x032C, r24
    22ea:	3d c0       	rjmp	.+122    	; 0x2366 <__stack+0x167>
		}
	
	}
	else if (mode==3 && data>=0 && data < 90)
    22ec:	80 91 18 03 	lds	r24, 0x0318
    22f0:	90 91 19 03 	lds	r25, 0x0319
    22f4:	83 30       	cpi	r24, 0x03	; 3
    22f6:	91 05       	cpc	r25, r1
    22f8:	b1 f5       	brne	.+108    	; 0x2366 <__stack+0x167>
    22fa:	80 91 42 03 	lds	r24, 0x0342
    22fe:	90 91 43 03 	lds	r25, 0x0343
    2302:	99 23       	and	r25, r25
    2304:	84 f1       	brlt	.+96     	; 0x2366 <__stack+0x167>
    2306:	80 91 42 03 	lds	r24, 0x0342
    230a:	90 91 43 03 	lds	r25, 0x0343
    230e:	8a 35       	cpi	r24, 0x5A	; 90
    2310:	91 05       	cpc	r25, r1
    2312:	4c f5       	brge	.+82     	; 0x2366 <__stack+0x167>
	{
		if(angle1-data>7 || angle1-data<-7)
    2314:	80 91 2a 03 	lds	r24, 0x032A
    2318:	90 91 2b 03 	lds	r25, 0x032B
    231c:	20 91 42 03 	lds	r18, 0x0342
    2320:	30 91 43 03 	lds	r19, 0x0343
    2324:	82 1b       	sub	r24, r18
    2326:	93 0b       	sbc	r25, r19
    2328:	88 30       	cpi	r24, 0x08	; 8
    232a:	91 05       	cpc	r25, r1
    232c:	74 f4       	brge	.+28     	; 0x234a <__stack+0x14b>
    232e:	80 91 2a 03 	lds	r24, 0x032A
    2332:	90 91 2b 03 	lds	r25, 0x032B
    2336:	20 91 42 03 	lds	r18, 0x0342
    233a:	30 91 43 03 	lds	r19, 0x0343
    233e:	82 1b       	sub	r24, r18
    2340:	93 0b       	sbc	r25, r19
    2342:	2f ef       	ldi	r18, 0xFF	; 255
    2344:	89 3f       	cpi	r24, 0xF9	; 249
    2346:	92 07       	cpc	r25, r18
    2348:	74 f4       	brge	.+28     	; 0x2366 <__stack+0x167>
		{
			angle1=data;
    234a:	80 91 42 03 	lds	r24, 0x0342
    234e:	90 91 43 03 	lds	r25, 0x0343
    2352:	90 93 2b 03 	sts	0x032B, r25
    2356:	80 93 2a 03 	sts	0x032A, r24
			servo_1(data);
    235a:	80 91 42 03 	lds	r24, 0x0342
    235e:	90 91 43 03 	lds	r25, 0x0343
    2362:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <servo_1>
/*	else  //ASCII value of 5
	{
		PORTA=0x00; //stop
	}
*/
}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	ff 91       	pop	r31
    236c:	ef 91       	pop	r30
    236e:	bf 91       	pop	r27
    2370:	af 91       	pop	r26
    2372:	9f 91       	pop	r25
    2374:	8f 91       	pop	r24
    2376:	7f 91       	pop	r23
    2378:	6f 91       	pop	r22
    237a:	5f 91       	pop	r21
    237c:	4f 91       	pop	r20
    237e:	3f 91       	pop	r19
    2380:	2f 91       	pop	r18
    2382:	0f 90       	pop	r0
    2384:	00 92 5b 00 	sts	0x005B, r0
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <init_devices>:

/*
Function To Initialize all The Devices
*/
void init_devices()
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    239a:	f8 94       	cli
 
 port_init();  //Initializes all the ports
    239c:	0e 94 5f 0c 	call	0x18be	; 0x18be <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
    23a0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <uart0_init>
 left_position_encoder_interrupt_init();
    23a4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    23a8:	0e 94 cf 0c 	call	0x199e	; 0x199e <right_position_encoder_interrupt_init>
 port_init_servo();
    23ac:	0e 94 bc 0b 	call	0x1778	; 0x1778 <port_init_servo>
 adc_init();
    23b0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <adc_init>
 timer1_init();
    23b4:	0e 94 29 0a 	call	0x1452	; 0x1452 <timer1_init>
 sei();   //Enables the global interrupts
    23b8:	78 94       	sei
}
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <main>:



//Main Function
int main(void)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	aa 97       	sbiw	r28, 0x2a	; 42
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    23d4:	0e 94 c9 11 	call	0x2392	; 0x2392 <init_devices>
	lcd_set_4bit();
    23d8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    23dc:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
	servo_1(0);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <servo_1>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 ef       	ldi	r26, 0xF0	; 240
    23ec:	b1 e4       	ldi	r27, 0x41	; 65
    23ee:	8f a3       	std	Y+39, r24	; 0x27
    23f0:	98 a7       	std	Y+40, r25	; 0x28
    23f2:	a9 a7       	std	Y+41, r26	; 0x29
    23f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	6f a1       	ldd	r22, Y+39	; 0x27
    23f8:	78 a5       	ldd	r23, Y+40	; 0x28
    23fa:	89 a5       	ldd	r24, Y+41	; 0x29
    23fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fe:	26 e6       	ldi	r18, 0x66	; 102
    2400:	36 e6       	ldi	r19, 0x66	; 102
    2402:	46 e6       	ldi	r20, 0x66	; 102
    2404:	55 e4       	ldi	r21, 0x45	; 69
    2406:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8b a3       	std	Y+35, r24	; 0x23
    2410:	9c a3       	std	Y+36, r25	; 0x24
    2412:	ad a3       	std	Y+37, r26	; 0x25
    2414:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2416:	6b a1       	ldd	r22, Y+35	; 0x23
    2418:	7c a1       	ldd	r23, Y+36	; 0x24
    241a:	8d a1       	ldd	r24, Y+37	; 0x25
    241c:	9e a1       	ldd	r25, Y+38	; 0x26
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <main+0x78>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9a a3       	std	Y+34, r25	; 0x22
    2434:	89 a3       	std	Y+33, r24	; 0x21
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <main+0xf6>
	else if (__tmp > 65535)
    2438:	6b a1       	ldd	r22, Y+35	; 0x23
    243a:	7c a1       	ldd	r23, Y+36	; 0x24
    243c:	8d a1       	ldd	r24, Y+37	; 0x25
    243e:	9e a1       	ldd	r25, Y+38	; 0x26
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	6f a1       	ldd	r22, Y+39	; 0x27
    2452:	78 a5       	ldd	r23, Y+40	; 0x28
    2454:	89 a5       	ldd	r24, Y+41	; 0x29
    2456:	9a a5       	ldd	r25, Y+42	; 0x2a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9a a3       	std	Y+34, r25	; 0x22
    2476:	89 a3       	std	Y+33, r24	; 0x21
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <main+0xd8>
    247a:	80 e7       	ldi	r24, 0x70	; 112
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	98 a3       	std	Y+32, r25	; 0x20
    2480:	8f 8f       	std	Y+31, r24	; 0x1f
    2482:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2484:	98 a1       	ldd	r25, Y+32	; 0x20
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <main+0xc6>
    248a:	98 a3       	std	Y+32, r25	; 0x20
    248c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	9a a3       	std	Y+34, r25	; 0x22
    2496:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	89 a1       	ldd	r24, Y+33	; 0x21
    249a:	9a a1       	ldd	r25, Y+34	; 0x22
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <main+0xba>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	6b a1       	ldd	r22, Y+35	; 0x23
    24a4:	7c a1       	ldd	r23, Y+36	; 0x24
    24a6:	8d a1       	ldd	r24, Y+37	; 0x25
    24a8:	9e a1       	ldd	r25, Y+38	; 0x26
    24aa:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	89 a1       	ldd	r24, Y+33	; 0x21
    24b8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ba:	9e 8f       	std	Y+30, r25	; 0x1e
    24bc:	8d 8f       	std	Y+29, r24	; 0x1d
    24be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <main+0x102>
    24c6:	9e 8f       	std	Y+30, r25	; 0x1e
    24c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);
	servo_2(0);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	0e 94 20 0b 	call	0x1640	; 0x1640 <servo_2>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 ef       	ldi	r26, 0xF0	; 240
    24d6:	b1 e4       	ldi	r27, 0x41	; 65
    24d8:	89 8f       	std	Y+25, r24	; 0x19
    24da:	9a 8f       	std	Y+26, r25	; 0x1a
    24dc:	ab 8f       	std	Y+27, r26	; 0x1b
    24de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	69 8d       	ldd	r22, Y+25	; 0x19
    24e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e8:	26 e6       	ldi	r18, 0x66	; 102
    24ea:	36 e6       	ldi	r19, 0x66	; 102
    24ec:	46 e6       	ldi	r20, 0x66	; 102
    24ee:	55 e4       	ldi	r21, 0x45	; 69
    24f0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8d 8b       	std	Y+21, r24	; 0x15
    24fa:	9e 8b       	std	Y+22, r25	; 0x16
    24fc:	af 8b       	std	Y+23, r26	; 0x17
    24fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2500:	6d 89       	ldd	r22, Y+21	; 0x15
    2502:	7e 89       	ldd	r23, Y+22	; 0x16
    2504:	8f 89       	ldd	r24, Y+23	; 0x17
    2506:	98 8d       	ldd	r25, Y+24	; 0x18
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <main+0x162>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <main+0x1e0>
	else if (__tmp > 65535)
    2522:	6d 89       	ldd	r22, Y+21	; 0x15
    2524:	7e 89       	ldd	r23, Y+22	; 0x16
    2526:	8f 89       	ldd	r24, Y+23	; 0x17
    2528:	98 8d       	ldd	r25, Y+24	; 0x18
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	69 8d       	ldd	r22, Y+25	; 0x19
    253c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <main+0x1c2>
    2564:	80 e7       	ldi	r24, 0x70	; 112
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
    256c:	89 89       	ldd	r24, Y+17	; 0x11
    256e:	9a 89       	ldd	r25, Y+18	; 0x12
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <main+0x1b0>
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <main+0x1a4>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <main+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6d 89       	ldd	r22, Y+21	; 0x15
    258e:	7e 89       	ldd	r23, Y+22	; 0x16
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9c 8b       	std	Y+20, r25	; 0x14
    259e:	8b 8b       	std	Y+19, r24	; 0x13
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	98 8b       	std	Y+16, r25	; 0x10
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	98 89       	ldd	r25, Y+16	; 0x10
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <main+0x1ec>
    25b0:	98 8b       	std	Y+16, r25	; 0x10
    25b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	servo_3(0);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <servo_3>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a0 ef       	ldi	r26, 0xF0	; 240
    25c0:	b1 e4       	ldi	r27, 0x41	; 65
    25c2:	8b 87       	std	Y+11, r24	; 0x0b
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	ad 87       	std	Y+13, r26	; 0x0d
    25c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    25cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d2:	26 e6       	ldi	r18, 0x66	; 102
    25d4:	36 e6       	ldi	r19, 0x66	; 102
    25d6:	46 e6       	ldi	r20, 0x66	; 102
    25d8:	55 e4       	ldi	r21, 0x45	; 69
    25da:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8f 83       	std	Y+7, r24	; 0x07
    25e4:	98 87       	std	Y+8, r25	; 0x08
    25e6:	a9 87       	std	Y+9, r26	; 0x09
    25e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <main+0x24c>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	3f c0       	rjmp	.+126    	; 0x268a <main+0x2ca>
	else if (__tmp > 65535)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <main+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6b 85       	ldd	r22, Y+11	; 0x0b
    2626:	7c 85       	ldd	r23, Y+12	; 0x0c
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	0f c0       	rjmp	.+30     	; 0x266c <main+0x2ac>
    264e:	80 e7       	ldi	r24, 0x70	; 112
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	9c 83       	std	Y+4, r25	; 0x04
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <main+0x29a>
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <main+0x28e>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <main+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	0e 94 96 13 	call	0x272c	; 0x272c <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <main+0x2d6>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	while(1){	
			sensor=0;
    269e:	10 92 36 03 	sts	0x0336, r1
			if(flag4==1) {rotate_left_hard(angledata); angledata = 0;} 
    26a2:	80 91 1a 03 	lds	r24, 0x031A
    26a6:	90 91 1b 03 	lds	r25, 0x031B
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	91 05       	cpc	r25, r1
    26ae:	51 f4       	brne	.+20     	; 0x26c4 <main+0x304>
    26b0:	80 91 16 03 	lds	r24, 0x0316
    26b4:	90 91 17 03 	lds	r25, 0x0317
    26b8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rotate_left_hard>
    26bc:	10 92 17 03 	sts	0x0317, r1
    26c0:	10 92 16 03 	sts	0x0316, r1
			if(flag6==1) {rotate_right_hard(angledata); angledata = 0;}
    26c4:	80 91 1c 03 	lds	r24, 0x031C
    26c8:	90 91 1d 03 	lds	r25, 0x031D
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	91 05       	cpc	r25, r1
    26d0:	51 f4       	brne	.+20     	; 0x26e6 <main+0x326>
    26d2:	80 91 16 03 	lds	r24, 0x0316
    26d6:	90 91 17 03 	lds	r25, 0x0317
    26da:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <rotate_right_hard>
    26de:	10 92 17 03 	sts	0x0317, r1
    26e2:	10 92 16 03 	sts	0x0316, r1
			if(flag7==1) {rotate_left_soft(angledata); angledata = 0;}
    26e6:	80 91 1e 03 	lds	r24, 0x031E
    26ea:	90 91 1f 03 	lds	r25, 0x031F
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	91 05       	cpc	r25, r1
    26f2:	51 f4       	brne	.+20     	; 0x2708 <main+0x348>
    26f4:	80 91 16 03 	lds	r24, 0x0316
    26f8:	90 91 17 03 	lds	r25, 0x0317
    26fc:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <rotate_left_soft>
    2700:	10 92 17 03 	sts	0x0317, r1
    2704:	10 92 16 03 	sts	0x0316, r1
			if(flag9==1) {rotate_right_soft(angledata); angledata = 0;}
    2708:	80 91 20 03 	lds	r24, 0x0320
    270c:	90 91 21 03 	lds	r25, 0x0321
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	91 05       	cpc	r25, r1
    2714:	21 f6       	brne	.-120    	; 0x269e <main+0x2de>
    2716:	80 91 16 03 	lds	r24, 0x0316
    271a:	90 91 17 03 	lds	r25, 0x0317
    271e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <rotate_right_soft>
    2722:	10 92 17 03 	sts	0x0317, r1
    2726:	10 92 16 03 	sts	0x0316, r1
    272a:	b9 cf       	rjmp	.-142    	; 0x269e <main+0x2de>

0000272c <__fixunssfsi>:
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	7b 01       	movw	r14, r22
    2736:	8c 01       	movw	r16, r24
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	5f e4       	ldi	r21, 0x4F	; 79
    2740:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    2744:	88 23       	and	r24, r24
    2746:	8c f0       	brlt	.+34     	; 0x276a <__fixunssfsi+0x3e>
    2748:	c8 01       	movw	r24, r16
    274a:	b7 01       	movw	r22, r14
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	5f e4       	ldi	r21, 0x4F	; 79
    2754:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__subsf3>
    2758:	0e 94 00 18 	call	0x3000	; 0x3000 <__fixsfsi>
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	20 50       	subi	r18, 0x00	; 0
    2762:	30 40       	sbci	r19, 0x00	; 0
    2764:	40 40       	sbci	r20, 0x00	; 0
    2766:	50 48       	sbci	r21, 0x80	; 128
    2768:	06 c0       	rjmp	.+12     	; 0x2776 <__fixunssfsi+0x4a>
    276a:	c8 01       	movw	r24, r16
    276c:	b7 01       	movw	r22, r14
    276e:	0e 94 00 18 	call	0x3000	; 0x3000 <__fixsfsi>
    2772:	9b 01       	movw	r18, r22
    2774:	ac 01       	movw	r20, r24
    2776:	b9 01       	movw	r22, r18
    2778:	ca 01       	movw	r24, r20
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	08 95       	ret

00002784 <_fpadd_parts>:
    2784:	a0 e0       	ldi	r26, 0x00	; 0
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e8 ec       	ldi	r30, 0xC8	; 200
    278a:	f3 e1       	ldi	r31, 0x13	; 19
    278c:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__prologue_saves__>
    2790:	dc 01       	movw	r26, r24
    2792:	2b 01       	movw	r4, r22
    2794:	fa 01       	movw	r30, r20
    2796:	9c 91       	ld	r25, X
    2798:	92 30       	cpi	r25, 0x02	; 2
    279a:	08 f4       	brcc	.+2      	; 0x279e <_fpadd_parts+0x1a>
    279c:	39 c1       	rjmp	.+626    	; 0x2a10 <_fpadd_parts+0x28c>
    279e:	eb 01       	movw	r28, r22
    27a0:	88 81       	ld	r24, Y
    27a2:	82 30       	cpi	r24, 0x02	; 2
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <_fpadd_parts+0x24>
    27a6:	33 c1       	rjmp	.+614    	; 0x2a0e <_fpadd_parts+0x28a>
    27a8:	94 30       	cpi	r25, 0x04	; 4
    27aa:	69 f4       	brne	.+26     	; 0x27c6 <_fpadd_parts+0x42>
    27ac:	84 30       	cpi	r24, 0x04	; 4
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <_fpadd_parts+0x2e>
    27b0:	2f c1       	rjmp	.+606    	; 0x2a10 <_fpadd_parts+0x28c>
    27b2:	11 96       	adiw	r26, 0x01	; 1
    27b4:	9c 91       	ld	r25, X
    27b6:	11 97       	sbiw	r26, 0x01	; 1
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	98 17       	cp	r25, r24
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <_fpadd_parts+0x3c>
    27be:	28 c1       	rjmp	.+592    	; 0x2a10 <_fpadd_parts+0x28c>
    27c0:	a6 e0       	ldi	r26, 0x06	; 6
    27c2:	b2 e0       	ldi	r27, 0x02	; 2
    27c4:	25 c1       	rjmp	.+586    	; 0x2a10 <_fpadd_parts+0x28c>
    27c6:	84 30       	cpi	r24, 0x04	; 4
    27c8:	09 f4       	brne	.+2      	; 0x27cc <_fpadd_parts+0x48>
    27ca:	21 c1       	rjmp	.+578    	; 0x2a0e <_fpadd_parts+0x28a>
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	a9 f4       	brne	.+42     	; 0x27fa <_fpadd_parts+0x76>
    27d0:	92 30       	cpi	r25, 0x02	; 2
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <_fpadd_parts+0x52>
    27d4:	1d c1       	rjmp	.+570    	; 0x2a10 <_fpadd_parts+0x28c>
    27d6:	9a 01       	movw	r18, r20
    27d8:	ad 01       	movw	r20, r26
    27da:	88 e0       	ldi	r24, 0x08	; 8
    27dc:	ea 01       	movw	r28, r20
    27de:	09 90       	ld	r0, Y+
    27e0:	ae 01       	movw	r20, r28
    27e2:	e9 01       	movw	r28, r18
    27e4:	09 92       	st	Y+, r0
    27e6:	9e 01       	movw	r18, r28
    27e8:	81 50       	subi	r24, 0x01	; 1
    27ea:	c1 f7       	brne	.-16     	; 0x27dc <_fpadd_parts+0x58>
    27ec:	e2 01       	movw	r28, r4
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	11 96       	adiw	r26, 0x01	; 1
    27f2:	9c 91       	ld	r25, X
    27f4:	89 23       	and	r24, r25
    27f6:	81 83       	std	Z+1, r24	; 0x01
    27f8:	08 c1       	rjmp	.+528    	; 0x2a0a <_fpadd_parts+0x286>
    27fa:	92 30       	cpi	r25, 0x02	; 2
    27fc:	09 f4       	brne	.+2      	; 0x2800 <_fpadd_parts+0x7c>
    27fe:	07 c1       	rjmp	.+526    	; 0x2a0e <_fpadd_parts+0x28a>
    2800:	12 96       	adiw	r26, 0x02	; 2
    2802:	2d 90       	ld	r2, X+
    2804:	3c 90       	ld	r3, X
    2806:	13 97       	sbiw	r26, 0x03	; 3
    2808:	eb 01       	movw	r28, r22
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	9b 81       	ldd	r25, Y+3	; 0x03
    280e:	14 96       	adiw	r26, 0x04	; 4
    2810:	ad 90       	ld	r10, X+
    2812:	bd 90       	ld	r11, X+
    2814:	cd 90       	ld	r12, X+
    2816:	dc 90       	ld	r13, X
    2818:	17 97       	sbiw	r26, 0x07	; 7
    281a:	ec 80       	ldd	r14, Y+4	; 0x04
    281c:	fd 80       	ldd	r15, Y+5	; 0x05
    281e:	0e 81       	ldd	r16, Y+6	; 0x06
    2820:	1f 81       	ldd	r17, Y+7	; 0x07
    2822:	91 01       	movw	r18, r2
    2824:	28 1b       	sub	r18, r24
    2826:	39 0b       	sbc	r19, r25
    2828:	b9 01       	movw	r22, r18
    282a:	37 ff       	sbrs	r19, 7
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <_fpadd_parts+0xb2>
    282e:	66 27       	eor	r22, r22
    2830:	77 27       	eor	r23, r23
    2832:	62 1b       	sub	r22, r18
    2834:	73 0b       	sbc	r23, r19
    2836:	60 32       	cpi	r22, 0x20	; 32
    2838:	71 05       	cpc	r23, r1
    283a:	0c f0       	brlt	.+2      	; 0x283e <_fpadd_parts+0xba>
    283c:	61 c0       	rjmp	.+194    	; 0x2900 <_fpadd_parts+0x17c>
    283e:	12 16       	cp	r1, r18
    2840:	13 06       	cpc	r1, r19
    2842:	6c f5       	brge	.+90     	; 0x289e <_fpadd_parts+0x11a>
    2844:	37 01       	movw	r6, r14
    2846:	48 01       	movw	r8, r16
    2848:	06 2e       	mov	r0, r22
    284a:	04 c0       	rjmp	.+8      	; 0x2854 <_fpadd_parts+0xd0>
    284c:	96 94       	lsr	r9
    284e:	87 94       	ror	r8
    2850:	77 94       	ror	r7
    2852:	67 94       	ror	r6
    2854:	0a 94       	dec	r0
    2856:	d2 f7       	brpl	.-12     	; 0x284c <_fpadd_parts+0xc8>
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	04 c0       	rjmp	.+8      	; 0x286a <_fpadd_parts+0xe6>
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	44 1f       	adc	r20, r20
    2868:	55 1f       	adc	r21, r21
    286a:	6a 95       	dec	r22
    286c:	d2 f7       	brpl	.-12     	; 0x2862 <_fpadd_parts+0xde>
    286e:	21 50       	subi	r18, 0x01	; 1
    2870:	30 40       	sbci	r19, 0x00	; 0
    2872:	40 40       	sbci	r20, 0x00	; 0
    2874:	50 40       	sbci	r21, 0x00	; 0
    2876:	2e 21       	and	r18, r14
    2878:	3f 21       	and	r19, r15
    287a:	40 23       	and	r20, r16
    287c:	51 23       	and	r21, r17
    287e:	21 15       	cp	r18, r1
    2880:	31 05       	cpc	r19, r1
    2882:	41 05       	cpc	r20, r1
    2884:	51 05       	cpc	r21, r1
    2886:	21 f0       	breq	.+8      	; 0x2890 <_fpadd_parts+0x10c>
    2888:	21 e0       	ldi	r18, 0x01	; 1
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	79 01       	movw	r14, r18
    2892:	8a 01       	movw	r16, r20
    2894:	e6 28       	or	r14, r6
    2896:	f7 28       	or	r15, r7
    2898:	08 29       	or	r16, r8
    289a:	19 29       	or	r17, r9
    289c:	3c c0       	rjmp	.+120    	; 0x2916 <_fpadd_parts+0x192>
    289e:	23 2b       	or	r18, r19
    28a0:	d1 f1       	breq	.+116    	; 0x2916 <_fpadd_parts+0x192>
    28a2:	26 0e       	add	r2, r22
    28a4:	37 1e       	adc	r3, r23
    28a6:	35 01       	movw	r6, r10
    28a8:	46 01       	movw	r8, r12
    28aa:	06 2e       	mov	r0, r22
    28ac:	04 c0       	rjmp	.+8      	; 0x28b6 <_fpadd_parts+0x132>
    28ae:	96 94       	lsr	r9
    28b0:	87 94       	ror	r8
    28b2:	77 94       	ror	r7
    28b4:	67 94       	ror	r6
    28b6:	0a 94       	dec	r0
    28b8:	d2 f7       	brpl	.-12     	; 0x28ae <_fpadd_parts+0x12a>
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <_fpadd_parts+0x148>
    28c4:	22 0f       	add	r18, r18
    28c6:	33 1f       	adc	r19, r19
    28c8:	44 1f       	adc	r20, r20
    28ca:	55 1f       	adc	r21, r21
    28cc:	6a 95       	dec	r22
    28ce:	d2 f7       	brpl	.-12     	; 0x28c4 <_fpadd_parts+0x140>
    28d0:	21 50       	subi	r18, 0x01	; 1
    28d2:	30 40       	sbci	r19, 0x00	; 0
    28d4:	40 40       	sbci	r20, 0x00	; 0
    28d6:	50 40       	sbci	r21, 0x00	; 0
    28d8:	2a 21       	and	r18, r10
    28da:	3b 21       	and	r19, r11
    28dc:	4c 21       	and	r20, r12
    28de:	5d 21       	and	r21, r13
    28e0:	21 15       	cp	r18, r1
    28e2:	31 05       	cpc	r19, r1
    28e4:	41 05       	cpc	r20, r1
    28e6:	51 05       	cpc	r21, r1
    28e8:	21 f0       	breq	.+8      	; 0x28f2 <_fpadd_parts+0x16e>
    28ea:	21 e0       	ldi	r18, 0x01	; 1
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	59 01       	movw	r10, r18
    28f4:	6a 01       	movw	r12, r20
    28f6:	a6 28       	or	r10, r6
    28f8:	b7 28       	or	r11, r7
    28fa:	c8 28       	or	r12, r8
    28fc:	d9 28       	or	r13, r9
    28fe:	0b c0       	rjmp	.+22     	; 0x2916 <_fpadd_parts+0x192>
    2900:	82 15       	cp	r24, r2
    2902:	93 05       	cpc	r25, r3
    2904:	2c f0       	brlt	.+10     	; 0x2910 <_fpadd_parts+0x18c>
    2906:	1c 01       	movw	r2, r24
    2908:	aa 24       	eor	r10, r10
    290a:	bb 24       	eor	r11, r11
    290c:	65 01       	movw	r12, r10
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <_fpadd_parts+0x192>
    2910:	ee 24       	eor	r14, r14
    2912:	ff 24       	eor	r15, r15
    2914:	87 01       	movw	r16, r14
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 91       	ld	r25, X
    291a:	d2 01       	movw	r26, r4
    291c:	11 96       	adiw	r26, 0x01	; 1
    291e:	8c 91       	ld	r24, X
    2920:	98 17       	cp	r25, r24
    2922:	09 f4       	brne	.+2      	; 0x2926 <_fpadd_parts+0x1a2>
    2924:	45 c0       	rjmp	.+138    	; 0x29b0 <_fpadd_parts+0x22c>
    2926:	99 23       	and	r25, r25
    2928:	39 f0       	breq	.+14     	; 0x2938 <_fpadd_parts+0x1b4>
    292a:	a8 01       	movw	r20, r16
    292c:	97 01       	movw	r18, r14
    292e:	2a 19       	sub	r18, r10
    2930:	3b 09       	sbc	r19, r11
    2932:	4c 09       	sbc	r20, r12
    2934:	5d 09       	sbc	r21, r13
    2936:	06 c0       	rjmp	.+12     	; 0x2944 <_fpadd_parts+0x1c0>
    2938:	a6 01       	movw	r20, r12
    293a:	95 01       	movw	r18, r10
    293c:	2e 19       	sub	r18, r14
    293e:	3f 09       	sbc	r19, r15
    2940:	40 0b       	sbc	r20, r16
    2942:	51 0b       	sbc	r21, r17
    2944:	57 fd       	sbrc	r21, 7
    2946:	08 c0       	rjmp	.+16     	; 0x2958 <_fpadd_parts+0x1d4>
    2948:	11 82       	std	Z+1, r1	; 0x01
    294a:	33 82       	std	Z+3, r3	; 0x03
    294c:	22 82       	std	Z+2, r2	; 0x02
    294e:	24 83       	std	Z+4, r18	; 0x04
    2950:	35 83       	std	Z+5, r19	; 0x05
    2952:	46 83       	std	Z+6, r20	; 0x06
    2954:	57 83       	std	Z+7, r21	; 0x07
    2956:	1d c0       	rjmp	.+58     	; 0x2992 <_fpadd_parts+0x20e>
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	81 83       	std	Z+1, r24	; 0x01
    295c:	33 82       	std	Z+3, r3	; 0x03
    295e:	22 82       	std	Z+2, r2	; 0x02
    2960:	88 27       	eor	r24, r24
    2962:	99 27       	eor	r25, r25
    2964:	dc 01       	movw	r26, r24
    2966:	82 1b       	sub	r24, r18
    2968:	93 0b       	sbc	r25, r19
    296a:	a4 0b       	sbc	r26, r20
    296c:	b5 0b       	sbc	r27, r21
    296e:	84 83       	std	Z+4, r24	; 0x04
    2970:	95 83       	std	Z+5, r25	; 0x05
    2972:	a6 83       	std	Z+6, r26	; 0x06
    2974:	b7 83       	std	Z+7, r27	; 0x07
    2976:	0d c0       	rjmp	.+26     	; 0x2992 <_fpadd_parts+0x20e>
    2978:	22 0f       	add	r18, r18
    297a:	33 1f       	adc	r19, r19
    297c:	44 1f       	adc	r20, r20
    297e:	55 1f       	adc	r21, r21
    2980:	24 83       	std	Z+4, r18	; 0x04
    2982:	35 83       	std	Z+5, r19	; 0x05
    2984:	46 83       	std	Z+6, r20	; 0x06
    2986:	57 83       	std	Z+7, r21	; 0x07
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	93 83       	std	Z+3, r25	; 0x03
    2990:	82 83       	std	Z+2, r24	; 0x02
    2992:	24 81       	ldd	r18, Z+4	; 0x04
    2994:	35 81       	ldd	r19, Z+5	; 0x05
    2996:	46 81       	ldd	r20, Z+6	; 0x06
    2998:	57 81       	ldd	r21, Z+7	; 0x07
    299a:	da 01       	movw	r26, r20
    299c:	c9 01       	movw	r24, r18
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	a1 09       	sbc	r26, r1
    29a2:	b1 09       	sbc	r27, r1
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	9f 4f       	sbci	r25, 0xFF	; 255
    29a8:	af 4f       	sbci	r26, 0xFF	; 255
    29aa:	bf 43       	sbci	r27, 0x3F	; 63
    29ac:	28 f3       	brcs	.-54     	; 0x2978 <_fpadd_parts+0x1f4>
    29ae:	0b c0       	rjmp	.+22     	; 0x29c6 <_fpadd_parts+0x242>
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	33 82       	std	Z+3, r3	; 0x03
    29b4:	22 82       	std	Z+2, r2	; 0x02
    29b6:	ea 0c       	add	r14, r10
    29b8:	fb 1c       	adc	r15, r11
    29ba:	0c 1d       	adc	r16, r12
    29bc:	1d 1d       	adc	r17, r13
    29be:	e4 82       	std	Z+4, r14	; 0x04
    29c0:	f5 82       	std	Z+5, r15	; 0x05
    29c2:	06 83       	std	Z+6, r16	; 0x06
    29c4:	17 83       	std	Z+7, r17	; 0x07
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	80 83       	st	Z, r24
    29ca:	24 81       	ldd	r18, Z+4	; 0x04
    29cc:	35 81       	ldd	r19, Z+5	; 0x05
    29ce:	46 81       	ldd	r20, Z+6	; 0x06
    29d0:	57 81       	ldd	r21, Z+7	; 0x07
    29d2:	57 ff       	sbrs	r21, 7
    29d4:	1a c0       	rjmp	.+52     	; 0x2a0a <_fpadd_parts+0x286>
    29d6:	c9 01       	movw	r24, r18
    29d8:	aa 27       	eor	r26, r26
    29da:	97 fd       	sbrc	r25, 7
    29dc:	a0 95       	com	r26
    29de:	ba 2f       	mov	r27, r26
    29e0:	81 70       	andi	r24, 0x01	; 1
    29e2:	90 70       	andi	r25, 0x00	; 0
    29e4:	a0 70       	andi	r26, 0x00	; 0
    29e6:	b0 70       	andi	r27, 0x00	; 0
    29e8:	56 95       	lsr	r21
    29ea:	47 95       	ror	r20
    29ec:	37 95       	ror	r19
    29ee:	27 95       	ror	r18
    29f0:	82 2b       	or	r24, r18
    29f2:	93 2b       	or	r25, r19
    29f4:	a4 2b       	or	r26, r20
    29f6:	b5 2b       	or	r27, r21
    29f8:	84 83       	std	Z+4, r24	; 0x04
    29fa:	95 83       	std	Z+5, r25	; 0x05
    29fc:	a6 83       	std	Z+6, r26	; 0x06
    29fe:	b7 83       	std	Z+7, r27	; 0x07
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	93 83       	std	Z+3, r25	; 0x03
    2a08:	82 83       	std	Z+2, r24	; 0x02
    2a0a:	df 01       	movw	r26, r30
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <_fpadd_parts+0x28c>
    2a0e:	d2 01       	movw	r26, r4
    2a10:	cd 01       	movw	r24, r26
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	e2 e1       	ldi	r30, 0x12	; 18
    2a18:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__epilogue_restores__>

00002a1c <__subsf3>:
    2a1c:	a0 e2       	ldi	r26, 0x20	; 32
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e4 e1       	ldi	r30, 0x14	; 20
    2a22:	f5 e1       	ldi	r31, 0x15	; 21
    2a24:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
    2a28:	69 83       	std	Y+1, r22	; 0x01
    2a2a:	7a 83       	std	Y+2, r23	; 0x02
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	2d 83       	std	Y+5, r18	; 0x05
    2a32:	3e 83       	std	Y+6, r19	; 0x06
    2a34:	4f 83       	std	Y+7, r20	; 0x07
    2a36:	58 87       	std	Y+8, r21	; 0x08
    2a38:	e9 e0       	ldi	r30, 0x09	; 9
    2a3a:	ee 2e       	mov	r14, r30
    2a3c:	f1 2c       	mov	r15, r1
    2a3e:	ec 0e       	add	r14, r28
    2a40:	fd 1e       	adc	r15, r29
    2a42:	ce 01       	movw	r24, r28
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	b7 01       	movw	r22, r14
    2a48:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	0f 5e       	subi	r16, 0xEF	; 239
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	ce 01       	movw	r24, r28
    2a54:	05 96       	adiw	r24, 0x05	; 5
    2a56:	b8 01       	movw	r22, r16
    2a58:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2a5c:	8a 89       	ldd	r24, Y+18	; 0x12
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
    2a60:	89 27       	eor	r24, r25
    2a62:	8a 8b       	std	Y+18, r24	; 0x12
    2a64:	c7 01       	movw	r24, r14
    2a66:	b8 01       	movw	r22, r16
    2a68:	ae 01       	movw	r20, r28
    2a6a:	47 5e       	subi	r20, 0xE7	; 231
    2a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6e:	0e 94 c2 13 	call	0x2784	; 0x2784 <_fpadd_parts>
    2a72:	0e 94 1c 19 	call	0x3238	; 0x3238 <__pack_f>
    2a76:	a0 96       	adiw	r28, 0x20	; 32
    2a78:	e6 e0       	ldi	r30, 0x06	; 6
    2a7a:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00002a7e <__addsf3>:
    2a7e:	a0 e2       	ldi	r26, 0x20	; 32
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e5 e4       	ldi	r30, 0x45	; 69
    2a84:	f5 e1       	ldi	r31, 0x15	; 21
    2a86:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
    2a8a:	69 83       	std	Y+1, r22	; 0x01
    2a8c:	7a 83       	std	Y+2, r23	; 0x02
    2a8e:	8b 83       	std	Y+3, r24	; 0x03
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	2d 83       	std	Y+5, r18	; 0x05
    2a94:	3e 83       	std	Y+6, r19	; 0x06
    2a96:	4f 83       	std	Y+7, r20	; 0x07
    2a98:	58 87       	std	Y+8, r21	; 0x08
    2a9a:	f9 e0       	ldi	r31, 0x09	; 9
    2a9c:	ef 2e       	mov	r14, r31
    2a9e:	f1 2c       	mov	r15, r1
    2aa0:	ec 0e       	add	r14, r28
    2aa2:	fd 1e       	adc	r15, r29
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2aae:	8e 01       	movw	r16, r28
    2ab0:	0f 5e       	subi	r16, 0xEF	; 239
    2ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	05 96       	adiw	r24, 0x05	; 5
    2ab8:	b8 01       	movw	r22, r16
    2aba:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2abe:	c7 01       	movw	r24, r14
    2ac0:	b8 01       	movw	r22, r16
    2ac2:	ae 01       	movw	r20, r28
    2ac4:	47 5e       	subi	r20, 0xE7	; 231
    2ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac8:	0e 94 c2 13 	call	0x2784	; 0x2784 <_fpadd_parts>
    2acc:	0e 94 1c 19 	call	0x3238	; 0x3238 <__pack_f>
    2ad0:	a0 96       	adiw	r28, 0x20	; 32
    2ad2:	e6 e0       	ldi	r30, 0x06	; 6
    2ad4:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00002ad8 <__mulsf3>:
    2ad8:	a0 e2       	ldi	r26, 0x20	; 32
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e2 e7       	ldi	r30, 0x72	; 114
    2ade:	f5 e1       	ldi	r31, 0x15	; 21
    2ae0:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__prologue_saves__>
    2ae4:	69 83       	std	Y+1, r22	; 0x01
    2ae6:	7a 83       	std	Y+2, r23	; 0x02
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	2d 83       	std	Y+5, r18	; 0x05
    2aee:	3e 83       	std	Y+6, r19	; 0x06
    2af0:	4f 83       	std	Y+7, r20	; 0x07
    2af2:	58 87       	std	Y+8, r21	; 0x08
    2af4:	ce 01       	movw	r24, r28
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	be 01       	movw	r22, r28
    2afa:	67 5f       	subi	r22, 0xF7	; 247
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2b02:	ce 01       	movw	r24, r28
    2b04:	05 96       	adiw	r24, 0x05	; 5
    2b06:	be 01       	movw	r22, r28
    2b08:	6f 5e       	subi	r22, 0xEF	; 239
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2b10:	99 85       	ldd	r25, Y+9	; 0x09
    2b12:	92 30       	cpi	r25, 0x02	; 2
    2b14:	88 f0       	brcs	.+34     	; 0x2b38 <__mulsf3+0x60>
    2b16:	89 89       	ldd	r24, Y+17	; 0x11
    2b18:	82 30       	cpi	r24, 0x02	; 2
    2b1a:	c8 f0       	brcs	.+50     	; 0x2b4e <__mulsf3+0x76>
    2b1c:	94 30       	cpi	r25, 0x04	; 4
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <__mulsf3+0x4e>
    2b20:	82 30       	cpi	r24, 0x02	; 2
    2b22:	51 f4       	brne	.+20     	; 0x2b38 <__mulsf3+0x60>
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <__mulsf3+0x56>
    2b26:	84 30       	cpi	r24, 0x04	; 4
    2b28:	29 f4       	brne	.+10     	; 0x2b34 <__mulsf3+0x5c>
    2b2a:	92 30       	cpi	r25, 0x02	; 2
    2b2c:	81 f4       	brne	.+32     	; 0x2b4e <__mulsf3+0x76>
    2b2e:	86 e0       	ldi	r24, 0x06	; 6
    2b30:	92 e0       	ldi	r25, 0x02	; 2
    2b32:	c6 c0       	rjmp	.+396    	; 0x2cc0 <__mulsf3+0x1e8>
    2b34:	92 30       	cpi	r25, 0x02	; 2
    2b36:	49 f4       	brne	.+18     	; 0x2b4a <__mulsf3+0x72>
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b3e:	98 13       	cpse	r25, r24
    2b40:	21 e0       	ldi	r18, 0x01	; 1
    2b42:	2a 87       	std	Y+10, r18	; 0x0a
    2b44:	ce 01       	movw	r24, r28
    2b46:	09 96       	adiw	r24, 0x09	; 9
    2b48:	bb c0       	rjmp	.+374    	; 0x2cc0 <__mulsf3+0x1e8>
    2b4a:	82 30       	cpi	r24, 0x02	; 2
    2b4c:	49 f4       	brne	.+18     	; 0x2b60 <__mulsf3+0x88>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	8a 89       	ldd	r24, Y+18	; 0x12
    2b54:	98 13       	cpse	r25, r24
    2b56:	21 e0       	ldi	r18, 0x01	; 1
    2b58:	2a 8b       	std	Y+18, r18	; 0x12
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	41 96       	adiw	r24, 0x11	; 17
    2b5e:	b0 c0       	rjmp	.+352    	; 0x2cc0 <__mulsf3+0x1e8>
    2b60:	2d 84       	ldd	r2, Y+13	; 0x0d
    2b62:	3e 84       	ldd	r3, Y+14	; 0x0e
    2b64:	4f 84       	ldd	r4, Y+15	; 0x0f
    2b66:	58 88       	ldd	r5, Y+16	; 0x10
    2b68:	6d 88       	ldd	r6, Y+21	; 0x15
    2b6a:	7e 88       	ldd	r7, Y+22	; 0x16
    2b6c:	8f 88       	ldd	r8, Y+23	; 0x17
    2b6e:	98 8c       	ldd	r9, Y+24	; 0x18
    2b70:	ee 24       	eor	r14, r14
    2b72:	ff 24       	eor	r15, r15
    2b74:	87 01       	movw	r16, r14
    2b76:	aa 24       	eor	r10, r10
    2b78:	bb 24       	eor	r11, r11
    2b7a:	65 01       	movw	r12, r10
    2b7c:	40 e0       	ldi	r20, 0x00	; 0
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	e0 e0       	ldi	r30, 0x00	; 0
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	c1 01       	movw	r24, r2
    2b8a:	81 70       	andi	r24, 0x01	; 1
    2b8c:	90 70       	andi	r25, 0x00	; 0
    2b8e:	89 2b       	or	r24, r25
    2b90:	e9 f0       	breq	.+58     	; 0x2bcc <__mulsf3+0xf4>
    2b92:	e6 0c       	add	r14, r6
    2b94:	f7 1c       	adc	r15, r7
    2b96:	08 1d       	adc	r16, r8
    2b98:	19 1d       	adc	r17, r9
    2b9a:	9a 01       	movw	r18, r20
    2b9c:	ab 01       	movw	r20, r22
    2b9e:	2a 0d       	add	r18, r10
    2ba0:	3b 1d       	adc	r19, r11
    2ba2:	4c 1d       	adc	r20, r12
    2ba4:	5d 1d       	adc	r21, r13
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a0 e0       	ldi	r26, 0x00	; 0
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e6 14       	cp	r14, r6
    2bb0:	f7 04       	cpc	r15, r7
    2bb2:	08 05       	cpc	r16, r8
    2bb4:	19 05       	cpc	r17, r9
    2bb6:	20 f4       	brcc	.+8      	; 0x2bc0 <__mulsf3+0xe8>
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a0 e0       	ldi	r26, 0x00	; 0
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	ba 01       	movw	r22, r20
    2bc2:	a9 01       	movw	r20, r18
    2bc4:	48 0f       	add	r20, r24
    2bc6:	59 1f       	adc	r21, r25
    2bc8:	6a 1f       	adc	r22, r26
    2bca:	7b 1f       	adc	r23, r27
    2bcc:	aa 0c       	add	r10, r10
    2bce:	bb 1c       	adc	r11, r11
    2bd0:	cc 1c       	adc	r12, r12
    2bd2:	dd 1c       	adc	r13, r13
    2bd4:	97 fe       	sbrs	r9, 7
    2bd6:	08 c0       	rjmp	.+16     	; 0x2be8 <__mulsf3+0x110>
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a0 e0       	ldi	r26, 0x00	; 0
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	a8 2a       	or	r10, r24
    2be2:	b9 2a       	or	r11, r25
    2be4:	ca 2a       	or	r12, r26
    2be6:	db 2a       	or	r13, r27
    2be8:	31 96       	adiw	r30, 0x01	; 1
    2bea:	e0 32       	cpi	r30, 0x20	; 32
    2bec:	f1 05       	cpc	r31, r1
    2bee:	49 f0       	breq	.+18     	; 0x2c02 <__mulsf3+0x12a>
    2bf0:	66 0c       	add	r6, r6
    2bf2:	77 1c       	adc	r7, r7
    2bf4:	88 1c       	adc	r8, r8
    2bf6:	99 1c       	adc	r9, r9
    2bf8:	56 94       	lsr	r5
    2bfa:	47 94       	ror	r4
    2bfc:	37 94       	ror	r3
    2bfe:	27 94       	ror	r2
    2c00:	c3 cf       	rjmp	.-122    	; 0x2b88 <__mulsf3+0xb0>
    2c02:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c04:	ea 89       	ldd	r30, Y+18	; 0x12
    2c06:	2b 89       	ldd	r18, Y+19	; 0x13
    2c08:	3c 89       	ldd	r19, Y+20	; 0x14
    2c0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c0e:	28 0f       	add	r18, r24
    2c10:	39 1f       	adc	r19, r25
    2c12:	2e 5f       	subi	r18, 0xFE	; 254
    2c14:	3f 4f       	sbci	r19, 0xFF	; 255
    2c16:	17 c0       	rjmp	.+46     	; 0x2c46 <__mulsf3+0x16e>
    2c18:	ca 01       	movw	r24, r20
    2c1a:	81 70       	andi	r24, 0x01	; 1
    2c1c:	90 70       	andi	r25, 0x00	; 0
    2c1e:	89 2b       	or	r24, r25
    2c20:	61 f0       	breq	.+24     	; 0x2c3a <__mulsf3+0x162>
    2c22:	16 95       	lsr	r17
    2c24:	07 95       	ror	r16
    2c26:	f7 94       	ror	r15
    2c28:	e7 94       	ror	r14
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e8       	ldi	r27, 0x80	; 128
    2c32:	e8 2a       	or	r14, r24
    2c34:	f9 2a       	or	r15, r25
    2c36:	0a 2b       	or	r16, r26
    2c38:	1b 2b       	or	r17, r27
    2c3a:	76 95       	lsr	r23
    2c3c:	67 95       	ror	r22
    2c3e:	57 95       	ror	r21
    2c40:	47 95       	ror	r20
    2c42:	2f 5f       	subi	r18, 0xFF	; 255
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	77 fd       	sbrc	r23, 7
    2c48:	e7 cf       	rjmp	.-50     	; 0x2c18 <__mulsf3+0x140>
    2c4a:	0c c0       	rjmp	.+24     	; 0x2c64 <__mulsf3+0x18c>
    2c4c:	44 0f       	add	r20, r20
    2c4e:	55 1f       	adc	r21, r21
    2c50:	66 1f       	adc	r22, r22
    2c52:	77 1f       	adc	r23, r23
    2c54:	17 fd       	sbrc	r17, 7
    2c56:	41 60       	ori	r20, 0x01	; 1
    2c58:	ee 0c       	add	r14, r14
    2c5a:	ff 1c       	adc	r15, r15
    2c5c:	00 1f       	adc	r16, r16
    2c5e:	11 1f       	adc	r17, r17
    2c60:	21 50       	subi	r18, 0x01	; 1
    2c62:	30 40       	sbci	r19, 0x00	; 0
    2c64:	40 30       	cpi	r20, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	59 07       	cpc	r21, r25
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	69 07       	cpc	r22, r25
    2c6e:	90 e4       	ldi	r25, 0x40	; 64
    2c70:	79 07       	cpc	r23, r25
    2c72:	60 f3       	brcs	.-40     	; 0x2c4c <__mulsf3+0x174>
    2c74:	2b 8f       	std	Y+27, r18	; 0x1b
    2c76:	3c 8f       	std	Y+28, r19	; 0x1c
    2c78:	db 01       	movw	r26, r22
    2c7a:	ca 01       	movw	r24, r20
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	90 70       	andi	r25, 0x00	; 0
    2c80:	a0 70       	andi	r26, 0x00	; 0
    2c82:	b0 70       	andi	r27, 0x00	; 0
    2c84:	80 34       	cpi	r24, 0x40	; 64
    2c86:	91 05       	cpc	r25, r1
    2c88:	a1 05       	cpc	r26, r1
    2c8a:	b1 05       	cpc	r27, r1
    2c8c:	61 f4       	brne	.+24     	; 0x2ca6 <__mulsf3+0x1ce>
    2c8e:	47 fd       	sbrc	r20, 7
    2c90:	0a c0       	rjmp	.+20     	; 0x2ca6 <__mulsf3+0x1ce>
    2c92:	e1 14       	cp	r14, r1
    2c94:	f1 04       	cpc	r15, r1
    2c96:	01 05       	cpc	r16, r1
    2c98:	11 05       	cpc	r17, r1
    2c9a:	29 f0       	breq	.+10     	; 0x2ca6 <__mulsf3+0x1ce>
    2c9c:	40 5c       	subi	r20, 0xC0	; 192
    2c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca0:	6f 4f       	sbci	r22, 0xFF	; 255
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	40 78       	andi	r20, 0x80	; 128
    2ca6:	1a 8e       	std	Y+26, r1	; 0x1a
    2ca8:	fe 17       	cp	r31, r30
    2caa:	11 f0       	breq	.+4      	; 0x2cb0 <__mulsf3+0x1d8>
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	8a 8f       	std	Y+26, r24	; 0x1a
    2cb0:	4d 8f       	std	Y+29, r20	; 0x1d
    2cb2:	5e 8f       	std	Y+30, r21	; 0x1e
    2cb4:	6f 8f       	std	Y+31, r22	; 0x1f
    2cb6:	78 a3       	std	Y+32, r23	; 0x20
    2cb8:	83 e0       	ldi	r24, 0x03	; 3
    2cba:	89 8f       	std	Y+25, r24	; 0x19
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	49 96       	adiw	r24, 0x19	; 25
    2cc0:	0e 94 1c 19 	call	0x3238	; 0x3238 <__pack_f>
    2cc4:	a0 96       	adiw	r28, 0x20	; 32
    2cc6:	e2 e1       	ldi	r30, 0x12	; 18
    2cc8:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__epilogue_restores__>

00002ccc <__divsf3>:
    2ccc:	a8 e1       	ldi	r26, 0x18	; 24
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ec e6       	ldi	r30, 0x6C	; 108
    2cd2:	f6 e1       	ldi	r31, 0x16	; 22
    2cd4:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x10>
    2cd8:	69 83       	std	Y+1, r22	; 0x01
    2cda:	7a 83       	std	Y+2, r23	; 0x02
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	2d 83       	std	Y+5, r18	; 0x05
    2ce2:	3e 83       	std	Y+6, r19	; 0x06
    2ce4:	4f 83       	std	Y+7, r20	; 0x07
    2ce6:	58 87       	std	Y+8, r21	; 0x08
    2ce8:	b9 e0       	ldi	r27, 0x09	; 9
    2cea:	eb 2e       	mov	r14, r27
    2cec:	f1 2c       	mov	r15, r1
    2cee:	ec 0e       	add	r14, r28
    2cf0:	fd 1e       	adc	r15, r29
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	b7 01       	movw	r22, r14
    2cf8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2cfc:	8e 01       	movw	r16, r28
    2cfe:	0f 5e       	subi	r16, 0xEF	; 239
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	ce 01       	movw	r24, r28
    2d04:	05 96       	adiw	r24, 0x05	; 5
    2d06:	b8 01       	movw	r22, r16
    2d08:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2d0c:	29 85       	ldd	r18, Y+9	; 0x09
    2d0e:	22 30       	cpi	r18, 0x02	; 2
    2d10:	08 f4       	brcc	.+2      	; 0x2d14 <__divsf3+0x48>
    2d12:	7e c0       	rjmp	.+252    	; 0x2e10 <__divsf3+0x144>
    2d14:	39 89       	ldd	r19, Y+17	; 0x11
    2d16:	32 30       	cpi	r19, 0x02	; 2
    2d18:	10 f4       	brcc	.+4      	; 0x2d1e <__divsf3+0x52>
    2d1a:	b8 01       	movw	r22, r16
    2d1c:	7c c0       	rjmp	.+248    	; 0x2e16 <__divsf3+0x14a>
    2d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d20:	9a 89       	ldd	r25, Y+18	; 0x12
    2d22:	89 27       	eor	r24, r25
    2d24:	8a 87       	std	Y+10, r24	; 0x0a
    2d26:	24 30       	cpi	r18, 0x04	; 4
    2d28:	11 f0       	breq	.+4      	; 0x2d2e <__divsf3+0x62>
    2d2a:	22 30       	cpi	r18, 0x02	; 2
    2d2c:	31 f4       	brne	.+12     	; 0x2d3a <__divsf3+0x6e>
    2d2e:	23 17       	cp	r18, r19
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <__divsf3+0x68>
    2d32:	6e c0       	rjmp	.+220    	; 0x2e10 <__divsf3+0x144>
    2d34:	66 e0       	ldi	r22, 0x06	; 6
    2d36:	72 e0       	ldi	r23, 0x02	; 2
    2d38:	6e c0       	rjmp	.+220    	; 0x2e16 <__divsf3+0x14a>
    2d3a:	34 30       	cpi	r19, 0x04	; 4
    2d3c:	39 f4       	brne	.+14     	; 0x2d4c <__divsf3+0x80>
    2d3e:	1d 86       	std	Y+13, r1	; 0x0d
    2d40:	1e 86       	std	Y+14, r1	; 0x0e
    2d42:	1f 86       	std	Y+15, r1	; 0x0f
    2d44:	18 8a       	std	Y+16, r1	; 0x10
    2d46:	1c 86       	std	Y+12, r1	; 0x0c
    2d48:	1b 86       	std	Y+11, r1	; 0x0b
    2d4a:	04 c0       	rjmp	.+8      	; 0x2d54 <__divsf3+0x88>
    2d4c:	32 30       	cpi	r19, 0x02	; 2
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <__divsf3+0x8c>
    2d50:	84 e0       	ldi	r24, 0x04	; 4
    2d52:	89 87       	std	Y+9, r24	; 0x09
    2d54:	b7 01       	movw	r22, r14
    2d56:	5f c0       	rjmp	.+190    	; 0x2e16 <__divsf3+0x14a>
    2d58:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d5a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d60:	28 1b       	sub	r18, r24
    2d62:	39 0b       	sbc	r19, r25
    2d64:	3c 87       	std	Y+12, r19	; 0x0c
    2d66:	2b 87       	std	Y+11, r18	; 0x0b
    2d68:	ed 84       	ldd	r14, Y+13	; 0x0d
    2d6a:	fe 84       	ldd	r15, Y+14	; 0x0e
    2d6c:	0f 85       	ldd	r16, Y+15	; 0x0f
    2d6e:	18 89       	ldd	r17, Y+16	; 0x10
    2d70:	ad 88       	ldd	r10, Y+21	; 0x15
    2d72:	be 88       	ldd	r11, Y+22	; 0x16
    2d74:	cf 88       	ldd	r12, Y+23	; 0x17
    2d76:	d8 8c       	ldd	r13, Y+24	; 0x18
    2d78:	ea 14       	cp	r14, r10
    2d7a:	fb 04       	cpc	r15, r11
    2d7c:	0c 05       	cpc	r16, r12
    2d7e:	1d 05       	cpc	r17, r13
    2d80:	40 f4       	brcc	.+16     	; 0x2d92 <__divsf3+0xc6>
    2d82:	ee 0c       	add	r14, r14
    2d84:	ff 1c       	adc	r15, r15
    2d86:	00 1f       	adc	r16, r16
    2d88:	11 1f       	adc	r17, r17
    2d8a:	21 50       	subi	r18, 0x01	; 1
    2d8c:	30 40       	sbci	r19, 0x00	; 0
    2d8e:	3c 87       	std	Y+12, r19	; 0x0c
    2d90:	2b 87       	std	Y+11, r18	; 0x0b
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	a0 e0       	ldi	r26, 0x00	; 0
    2da0:	b0 e4       	ldi	r27, 0x40	; 64
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	ea 14       	cp	r14, r10
    2da8:	fb 04       	cpc	r15, r11
    2daa:	0c 05       	cpc	r16, r12
    2dac:	1d 05       	cpc	r17, r13
    2dae:	40 f0       	brcs	.+16     	; 0x2dc0 <__divsf3+0xf4>
    2db0:	28 2b       	or	r18, r24
    2db2:	39 2b       	or	r19, r25
    2db4:	4a 2b       	or	r20, r26
    2db6:	5b 2b       	or	r21, r27
    2db8:	ea 18       	sub	r14, r10
    2dba:	fb 08       	sbc	r15, r11
    2dbc:	0c 09       	sbc	r16, r12
    2dbe:	1d 09       	sbc	r17, r13
    2dc0:	b6 95       	lsr	r27
    2dc2:	a7 95       	ror	r26
    2dc4:	97 95       	ror	r25
    2dc6:	87 95       	ror	r24
    2dc8:	ee 0c       	add	r14, r14
    2dca:	ff 1c       	adc	r15, r15
    2dcc:	00 1f       	adc	r16, r16
    2dce:	11 1f       	adc	r17, r17
    2dd0:	6f 5f       	subi	r22, 0xFF	; 255
    2dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd4:	6f 31       	cpi	r22, 0x1F	; 31
    2dd6:	71 05       	cpc	r23, r1
    2dd8:	31 f7       	brne	.-52     	; 0x2da6 <__divsf3+0xda>
    2dda:	da 01       	movw	r26, r20
    2ddc:	c9 01       	movw	r24, r18
    2dde:	8f 77       	andi	r24, 0x7F	; 127
    2de0:	90 70       	andi	r25, 0x00	; 0
    2de2:	a0 70       	andi	r26, 0x00	; 0
    2de4:	b0 70       	andi	r27, 0x00	; 0
    2de6:	80 34       	cpi	r24, 0x40	; 64
    2de8:	91 05       	cpc	r25, r1
    2dea:	a1 05       	cpc	r26, r1
    2dec:	b1 05       	cpc	r27, r1
    2dee:	61 f4       	brne	.+24     	; 0x2e08 <__divsf3+0x13c>
    2df0:	27 fd       	sbrc	r18, 7
    2df2:	0a c0       	rjmp	.+20     	; 0x2e08 <__divsf3+0x13c>
    2df4:	e1 14       	cp	r14, r1
    2df6:	f1 04       	cpc	r15, r1
    2df8:	01 05       	cpc	r16, r1
    2dfa:	11 05       	cpc	r17, r1
    2dfc:	29 f0       	breq	.+10     	; 0x2e08 <__divsf3+0x13c>
    2dfe:	20 5c       	subi	r18, 0xC0	; 192
    2e00:	3f 4f       	sbci	r19, 0xFF	; 255
    2e02:	4f 4f       	sbci	r20, 0xFF	; 255
    2e04:	5f 4f       	sbci	r21, 0xFF	; 255
    2e06:	20 78       	andi	r18, 0x80	; 128
    2e08:	2d 87       	std	Y+13, r18	; 0x0d
    2e0a:	3e 87       	std	Y+14, r19	; 0x0e
    2e0c:	4f 87       	std	Y+15, r20	; 0x0f
    2e0e:	58 8b       	std	Y+16, r21	; 0x10
    2e10:	be 01       	movw	r22, r28
    2e12:	67 5f       	subi	r22, 0xF7	; 247
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	cb 01       	movw	r24, r22
    2e18:	0e 94 1c 19 	call	0x3238	; 0x3238 <__pack_f>
    2e1c:	68 96       	adiw	r28, 0x18	; 24
    2e1e:	ea e0       	ldi	r30, 0x0A	; 10
    2e20:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x10>

00002e24 <__gtsf2>:
    2e24:	a8 e1       	ldi	r26, 0x18	; 24
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e8 e1       	ldi	r30, 0x18	; 24
    2e2a:	f7 e1       	ldi	r31, 0x17	; 23
    2e2c:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
    2e30:	69 83       	std	Y+1, r22	; 0x01
    2e32:	7a 83       	std	Y+2, r23	; 0x02
    2e34:	8b 83       	std	Y+3, r24	; 0x03
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	2d 83       	std	Y+5, r18	; 0x05
    2e3a:	3e 83       	std	Y+6, r19	; 0x06
    2e3c:	4f 83       	std	Y+7, r20	; 0x07
    2e3e:	58 87       	std	Y+8, r21	; 0x08
    2e40:	89 e0       	ldi	r24, 0x09	; 9
    2e42:	e8 2e       	mov	r14, r24
    2e44:	f1 2c       	mov	r15, r1
    2e46:	ec 0e       	add	r14, r28
    2e48:	fd 1e       	adc	r15, r29
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	b7 01       	movw	r22, r14
    2e50:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2e54:	8e 01       	movw	r16, r28
    2e56:	0f 5e       	subi	r16, 0xEF	; 239
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	05 96       	adiw	r24, 0x05	; 5
    2e5e:	b8 01       	movw	r22, r16
    2e60:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	82 30       	cpi	r24, 0x02	; 2
    2e68:	40 f0       	brcs	.+16     	; 0x2e7a <__gtsf2+0x56>
    2e6a:	89 89       	ldd	r24, Y+17	; 0x11
    2e6c:	82 30       	cpi	r24, 0x02	; 2
    2e6e:	28 f0       	brcs	.+10     	; 0x2e7a <__gtsf2+0x56>
    2e70:	c7 01       	movw	r24, r14
    2e72:	b8 01       	movw	r22, r16
    2e74:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__fpcmp_parts_f>
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <__gtsf2+0x58>
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	68 96       	adiw	r28, 0x18	; 24
    2e7e:	e6 e0       	ldi	r30, 0x06	; 6
    2e80:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00002e84 <__gesf2>:
    2e84:	a8 e1       	ldi	r26, 0x18	; 24
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e8 e4       	ldi	r30, 0x48	; 72
    2e8a:	f7 e1       	ldi	r31, 0x17	; 23
    2e8c:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
    2e90:	69 83       	std	Y+1, r22	; 0x01
    2e92:	7a 83       	std	Y+2, r23	; 0x02
    2e94:	8b 83       	std	Y+3, r24	; 0x03
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	2d 83       	std	Y+5, r18	; 0x05
    2e9a:	3e 83       	std	Y+6, r19	; 0x06
    2e9c:	4f 83       	std	Y+7, r20	; 0x07
    2e9e:	58 87       	std	Y+8, r21	; 0x08
    2ea0:	89 e0       	ldi	r24, 0x09	; 9
    2ea2:	e8 2e       	mov	r14, r24
    2ea4:	f1 2c       	mov	r15, r1
    2ea6:	ec 0e       	add	r14, r28
    2ea8:	fd 1e       	adc	r15, r29
    2eaa:	ce 01       	movw	r24, r28
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	b7 01       	movw	r22, r14
    2eb0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2eb4:	8e 01       	movw	r16, r28
    2eb6:	0f 5e       	subi	r16, 0xEF	; 239
    2eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eba:	ce 01       	movw	r24, r28
    2ebc:	05 96       	adiw	r24, 0x05	; 5
    2ebe:	b8 01       	movw	r22, r16
    2ec0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	82 30       	cpi	r24, 0x02	; 2
    2ec8:	40 f0       	brcs	.+16     	; 0x2eda <__gesf2+0x56>
    2eca:	89 89       	ldd	r24, Y+17	; 0x11
    2ecc:	82 30       	cpi	r24, 0x02	; 2
    2ece:	28 f0       	brcs	.+10     	; 0x2eda <__gesf2+0x56>
    2ed0:	c7 01       	movw	r24, r14
    2ed2:	b8 01       	movw	r22, r16
    2ed4:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__fpcmp_parts_f>
    2ed8:	01 c0       	rjmp	.+2      	; 0x2edc <__gesf2+0x58>
    2eda:	8f ef       	ldi	r24, 0xFF	; 255
    2edc:	68 96       	adiw	r28, 0x18	; 24
    2ede:	e6 e0       	ldi	r30, 0x06	; 6
    2ee0:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00002ee4 <__ltsf2>:
    2ee4:	a8 e1       	ldi	r26, 0x18	; 24
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e8 e7       	ldi	r30, 0x78	; 120
    2eea:	f7 e1       	ldi	r31, 0x17	; 23
    2eec:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
    2ef0:	69 83       	std	Y+1, r22	; 0x01
    2ef2:	7a 83       	std	Y+2, r23	; 0x02
    2ef4:	8b 83       	std	Y+3, r24	; 0x03
    2ef6:	9c 83       	std	Y+4, r25	; 0x04
    2ef8:	2d 83       	std	Y+5, r18	; 0x05
    2efa:	3e 83       	std	Y+6, r19	; 0x06
    2efc:	4f 83       	std	Y+7, r20	; 0x07
    2efe:	58 87       	std	Y+8, r21	; 0x08
    2f00:	89 e0       	ldi	r24, 0x09	; 9
    2f02:	e8 2e       	mov	r14, r24
    2f04:	f1 2c       	mov	r15, r1
    2f06:	ec 0e       	add	r14, r28
    2f08:	fd 1e       	adc	r15, r29
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	b7 01       	movw	r22, r14
    2f10:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2f14:	8e 01       	movw	r16, r28
    2f16:	0f 5e       	subi	r16, 0xEF	; 239
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	05 96       	adiw	r24, 0x05	; 5
    2f1e:	b8 01       	movw	r22, r16
    2f20:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	82 30       	cpi	r24, 0x02	; 2
    2f28:	40 f0       	brcs	.+16     	; 0x2f3a <__ltsf2+0x56>
    2f2a:	89 89       	ldd	r24, Y+17	; 0x11
    2f2c:	82 30       	cpi	r24, 0x02	; 2
    2f2e:	28 f0       	brcs	.+10     	; 0x2f3a <__ltsf2+0x56>
    2f30:	c7 01       	movw	r24, r14
    2f32:	b8 01       	movw	r22, r16
    2f34:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__fpcmp_parts_f>
    2f38:	01 c0       	rjmp	.+2      	; 0x2f3c <__ltsf2+0x58>
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	68 96       	adiw	r28, 0x18	; 24
    2f3e:	e6 e0       	ldi	r30, 0x06	; 6
    2f40:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

00002f44 <__floatsisf>:
    2f44:	a8 e0       	ldi	r26, 0x08	; 8
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 ea       	ldi	r30, 0xA8	; 168
    2f4a:	f7 e1       	ldi	r31, 0x17	; 23
    2f4c:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x12>
    2f50:	9b 01       	movw	r18, r22
    2f52:	ac 01       	movw	r20, r24
    2f54:	83 e0       	ldi	r24, 0x03	; 3
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	da 01       	movw	r26, r20
    2f5a:	c9 01       	movw	r24, r18
    2f5c:	88 27       	eor	r24, r24
    2f5e:	b7 fd       	sbrc	r27, 7
    2f60:	83 95       	inc	r24
    2f62:	99 27       	eor	r25, r25
    2f64:	aa 27       	eor	r26, r26
    2f66:	bb 27       	eor	r27, r27
    2f68:	b8 2e       	mov	r11, r24
    2f6a:	21 15       	cp	r18, r1
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	41 05       	cpc	r20, r1
    2f70:	51 05       	cpc	r21, r1
    2f72:	19 f4       	brne	.+6      	; 0x2f7a <__floatsisf+0x36>
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	3a c0       	rjmp	.+116    	; 0x2fee <__floatsisf+0xaa>
    2f7a:	88 23       	and	r24, r24
    2f7c:	a9 f0       	breq	.+42     	; 0x2fa8 <__floatsisf+0x64>
    2f7e:	20 30       	cpi	r18, 0x00	; 0
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	38 07       	cpc	r19, r24
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	48 07       	cpc	r20, r24
    2f88:	80 e8       	ldi	r24, 0x80	; 128
    2f8a:	58 07       	cpc	r21, r24
    2f8c:	29 f4       	brne	.+10     	; 0x2f98 <__floatsisf+0x54>
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	9f ec       	ldi	r25, 0xCF	; 207
    2f96:	30 c0       	rjmp	.+96     	; 0x2ff8 <__floatsisf+0xb4>
    2f98:	ee 24       	eor	r14, r14
    2f9a:	ff 24       	eor	r15, r15
    2f9c:	87 01       	movw	r16, r14
    2f9e:	e2 1a       	sub	r14, r18
    2fa0:	f3 0a       	sbc	r15, r19
    2fa2:	04 0b       	sbc	r16, r20
    2fa4:	15 0b       	sbc	r17, r21
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <__floatsisf+0x68>
    2fa8:	79 01       	movw	r14, r18
    2faa:	8a 01       	movw	r16, r20
    2fac:	8e e1       	ldi	r24, 0x1E	; 30
    2fae:	c8 2e       	mov	r12, r24
    2fb0:	d1 2c       	mov	r13, r1
    2fb2:	dc 82       	std	Y+4, r13	; 0x04
    2fb4:	cb 82       	std	Y+3, r12	; 0x03
    2fb6:	ed 82       	std	Y+5, r14	; 0x05
    2fb8:	fe 82       	std	Y+6, r15	; 0x06
    2fba:	0f 83       	std	Y+7, r16	; 0x07
    2fbc:	18 87       	std	Y+8, r17	; 0x08
    2fbe:	c8 01       	movw	r24, r16
    2fc0:	b7 01       	movw	r22, r14
    2fc2:	0e 94 cd 18 	call	0x319a	; 0x319a <__clzsi2>
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	18 16       	cp	r1, r24
    2fca:	19 06       	cpc	r1, r25
    2fcc:	84 f4       	brge	.+32     	; 0x2fee <__floatsisf+0xaa>
    2fce:	08 2e       	mov	r0, r24
    2fd0:	04 c0       	rjmp	.+8      	; 0x2fda <__floatsisf+0x96>
    2fd2:	ee 0c       	add	r14, r14
    2fd4:	ff 1c       	adc	r15, r15
    2fd6:	00 1f       	adc	r16, r16
    2fd8:	11 1f       	adc	r17, r17
    2fda:	0a 94       	dec	r0
    2fdc:	d2 f7       	brpl	.-12     	; 0x2fd2 <__floatsisf+0x8e>
    2fde:	ed 82       	std	Y+5, r14	; 0x05
    2fe0:	fe 82       	std	Y+6, r15	; 0x06
    2fe2:	0f 83       	std	Y+7, r16	; 0x07
    2fe4:	18 87       	std	Y+8, r17	; 0x08
    2fe6:	c8 1a       	sub	r12, r24
    2fe8:	d9 0a       	sbc	r13, r25
    2fea:	dc 82       	std	Y+4, r13	; 0x04
    2fec:	cb 82       	std	Y+3, r12	; 0x03
    2fee:	ba 82       	std	Y+2, r11	; 0x02
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	01 96       	adiw	r24, 0x01	; 1
    2ff4:	0e 94 1c 19 	call	0x3238	; 0x3238 <__pack_f>
    2ff8:	28 96       	adiw	r28, 0x08	; 8
    2ffa:	e9 e0       	ldi	r30, 0x09	; 9
    2ffc:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x12>

00003000 <__fixsfsi>:
    3000:	ac e0       	ldi	r26, 0x0C	; 12
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e6 e0       	ldi	r30, 0x06	; 6
    3006:	f8 e1       	ldi	r31, 0x18	; 24
    3008:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x20>
    300c:	69 83       	std	Y+1, r22	; 0x01
    300e:	7a 83       	std	Y+2, r23	; 0x02
    3010:	8b 83       	std	Y+3, r24	; 0x03
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	ce 01       	movw	r24, r28
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	be 01       	movw	r22, r28
    301a:	6b 5f       	subi	r22, 0xFB	; 251
    301c:	7f 4f       	sbci	r23, 0xFF	; 255
    301e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__unpack_f>
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	61 f1       	breq	.+88     	; 0x3080 <__fixsfsi+0x80>
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	50 f1       	brcs	.+84     	; 0x3080 <__fixsfsi+0x80>
    302c:	84 30       	cpi	r24, 0x04	; 4
    302e:	21 f4       	brne	.+8      	; 0x3038 <__fixsfsi+0x38>
    3030:	8e 81       	ldd	r24, Y+6	; 0x06
    3032:	88 23       	and	r24, r24
    3034:	51 f1       	breq	.+84     	; 0x308a <__fixsfsi+0x8a>
    3036:	2e c0       	rjmp	.+92     	; 0x3094 <__fixsfsi+0x94>
    3038:	2f 81       	ldd	r18, Y+7	; 0x07
    303a:	38 85       	ldd	r19, Y+8	; 0x08
    303c:	37 fd       	sbrc	r19, 7
    303e:	20 c0       	rjmp	.+64     	; 0x3080 <__fixsfsi+0x80>
    3040:	6e 81       	ldd	r22, Y+6	; 0x06
    3042:	2f 31       	cpi	r18, 0x1F	; 31
    3044:	31 05       	cpc	r19, r1
    3046:	1c f0       	brlt	.+6      	; 0x304e <__fixsfsi+0x4e>
    3048:	66 23       	and	r22, r22
    304a:	f9 f0       	breq	.+62     	; 0x308a <__fixsfsi+0x8a>
    304c:	23 c0       	rjmp	.+70     	; 0x3094 <__fixsfsi+0x94>
    304e:	8e e1       	ldi	r24, 0x1E	; 30
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	82 1b       	sub	r24, r18
    3054:	93 0b       	sbc	r25, r19
    3056:	29 85       	ldd	r18, Y+9	; 0x09
    3058:	3a 85       	ldd	r19, Y+10	; 0x0a
    305a:	4b 85       	ldd	r20, Y+11	; 0x0b
    305c:	5c 85       	ldd	r21, Y+12	; 0x0c
    305e:	04 c0       	rjmp	.+8      	; 0x3068 <__fixsfsi+0x68>
    3060:	56 95       	lsr	r21
    3062:	47 95       	ror	r20
    3064:	37 95       	ror	r19
    3066:	27 95       	ror	r18
    3068:	8a 95       	dec	r24
    306a:	d2 f7       	brpl	.-12     	; 0x3060 <__fixsfsi+0x60>
    306c:	66 23       	and	r22, r22
    306e:	b1 f0       	breq	.+44     	; 0x309c <__fixsfsi+0x9c>
    3070:	50 95       	com	r21
    3072:	40 95       	com	r20
    3074:	30 95       	com	r19
    3076:	21 95       	neg	r18
    3078:	3f 4f       	sbci	r19, 0xFF	; 255
    307a:	4f 4f       	sbci	r20, 0xFF	; 255
    307c:	5f 4f       	sbci	r21, 0xFF	; 255
    307e:	0e c0       	rjmp	.+28     	; 0x309c <__fixsfsi+0x9c>
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	09 c0       	rjmp	.+18     	; 0x309c <__fixsfsi+0x9c>
    308a:	2f ef       	ldi	r18, 0xFF	; 255
    308c:	3f ef       	ldi	r19, 0xFF	; 255
    308e:	4f ef       	ldi	r20, 0xFF	; 255
    3090:	5f e7       	ldi	r21, 0x7F	; 127
    3092:	04 c0       	rjmp	.+8      	; 0x309c <__fixsfsi+0x9c>
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	50 e8       	ldi	r21, 0x80	; 128
    309c:	b9 01       	movw	r22, r18
    309e:	ca 01       	movw	r24, r20
    30a0:	2c 96       	adiw	r28, 0x0c	; 12
    30a2:	e2 e0       	ldi	r30, 0x02	; 2
    30a4:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x20>

000030a8 <__floatunsisf>:
    30a8:	a8 e0       	ldi	r26, 0x08	; 8
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	ea e5       	ldi	r30, 0x5A	; 90
    30ae:	f8 e1       	ldi	r31, 0x18	; 24
    30b0:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x10>
    30b4:	7b 01       	movw	r14, r22
    30b6:	8c 01       	movw	r16, r24
    30b8:	61 15       	cp	r22, r1
    30ba:	71 05       	cpc	r23, r1
    30bc:	81 05       	cpc	r24, r1
    30be:	91 05       	cpc	r25, r1
    30c0:	19 f4       	brne	.+6      	; 0x30c8 <__floatunsisf+0x20>
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	60 c0       	rjmp	.+192    	; 0x3188 <__floatunsisf+0xe0>
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	8e e1       	ldi	r24, 0x1E	; 30
    30ce:	c8 2e       	mov	r12, r24
    30d0:	d1 2c       	mov	r13, r1
    30d2:	dc 82       	std	Y+4, r13	; 0x04
    30d4:	cb 82       	std	Y+3, r12	; 0x03
    30d6:	ed 82       	std	Y+5, r14	; 0x05
    30d8:	fe 82       	std	Y+6, r15	; 0x06
    30da:	0f 83       	std	Y+7, r16	; 0x07
    30dc:	18 87       	std	Y+8, r17	; 0x08
    30de:	c8 01       	movw	r24, r16
    30e0:	b7 01       	movw	r22, r14
    30e2:	0e 94 cd 18 	call	0x319a	; 0x319a <__clzsi2>
    30e6:	fc 01       	movw	r30, r24
    30e8:	31 97       	sbiw	r30, 0x01	; 1
    30ea:	f7 ff       	sbrs	r31, 7
    30ec:	3b c0       	rjmp	.+118    	; 0x3164 <__floatunsisf+0xbc>
    30ee:	22 27       	eor	r18, r18
    30f0:	33 27       	eor	r19, r19
    30f2:	2e 1b       	sub	r18, r30
    30f4:	3f 0b       	sbc	r19, r31
    30f6:	57 01       	movw	r10, r14
    30f8:	68 01       	movw	r12, r16
    30fa:	02 2e       	mov	r0, r18
    30fc:	04 c0       	rjmp	.+8      	; 0x3106 <__floatunsisf+0x5e>
    30fe:	d6 94       	lsr	r13
    3100:	c7 94       	ror	r12
    3102:	b7 94       	ror	r11
    3104:	a7 94       	ror	r10
    3106:	0a 94       	dec	r0
    3108:	d2 f7       	brpl	.-12     	; 0x30fe <__floatunsisf+0x56>
    310a:	40 e0       	ldi	r20, 0x00	; 0
    310c:	50 e0       	ldi	r21, 0x00	; 0
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	a0 e0       	ldi	r26, 0x00	; 0
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	04 c0       	rjmp	.+8      	; 0x3124 <__floatunsisf+0x7c>
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	aa 1f       	adc	r26, r26
    3122:	bb 1f       	adc	r27, r27
    3124:	2a 95       	dec	r18
    3126:	d2 f7       	brpl	.-12     	; 0x311c <__floatunsisf+0x74>
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	a1 09       	sbc	r26, r1
    312c:	b1 09       	sbc	r27, r1
    312e:	8e 21       	and	r24, r14
    3130:	9f 21       	and	r25, r15
    3132:	a0 23       	and	r26, r16
    3134:	b1 23       	and	r27, r17
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	a1 05       	cpc	r26, r1
    313a:	b1 05       	cpc	r27, r1
    313c:	21 f0       	breq	.+8      	; 0x3146 <__floatunsisf+0x9e>
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	4a 29       	or	r20, r10
    3148:	5b 29       	or	r21, r11
    314a:	6c 29       	or	r22, r12
    314c:	7d 29       	or	r23, r13
    314e:	4d 83       	std	Y+5, r20	; 0x05
    3150:	5e 83       	std	Y+6, r21	; 0x06
    3152:	6f 83       	std	Y+7, r22	; 0x07
    3154:	78 87       	std	Y+8, r23	; 0x08
    3156:	8e e1       	ldi	r24, 0x1E	; 30
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	8e 1b       	sub	r24, r30
    315c:	9f 0b       	sbc	r25, r31
    315e:	9c 83       	std	Y+4, r25	; 0x04
    3160:	8b 83       	std	Y+3, r24	; 0x03
    3162:	12 c0       	rjmp	.+36     	; 0x3188 <__floatunsisf+0xe0>
    3164:	30 97       	sbiw	r30, 0x00	; 0
    3166:	81 f0       	breq	.+32     	; 0x3188 <__floatunsisf+0xe0>
    3168:	0e 2e       	mov	r0, r30
    316a:	04 c0       	rjmp	.+8      	; 0x3174 <__floatunsisf+0xcc>
    316c:	ee 0c       	add	r14, r14
    316e:	ff 1c       	adc	r15, r15
    3170:	00 1f       	adc	r16, r16
    3172:	11 1f       	adc	r17, r17
    3174:	0a 94       	dec	r0
    3176:	d2 f7       	brpl	.-12     	; 0x316c <__floatunsisf+0xc4>
    3178:	ed 82       	std	Y+5, r14	; 0x05
    317a:	fe 82       	std	Y+6, r15	; 0x06
    317c:	0f 83       	std	Y+7, r16	; 0x07
    317e:	18 87       	std	Y+8, r17	; 0x08
    3180:	ce 1a       	sub	r12, r30
    3182:	df 0a       	sbc	r13, r31
    3184:	dc 82       	std	Y+4, r13	; 0x04
    3186:	cb 82       	std	Y+3, r12	; 0x03
    3188:	1a 82       	std	Y+2, r1	; 0x02
    318a:	ce 01       	movw	r24, r28
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	0e 94 1c 19 	call	0x3238	; 0x3238 <__pack_f>
    3192:	28 96       	adiw	r28, 0x08	; 8
    3194:	ea e0       	ldi	r30, 0x0A	; 10
    3196:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x10>

0000319a <__clzsi2>:
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	7b 01       	movw	r14, r22
    31a4:	8c 01       	movw	r16, r24
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	e8 16       	cp	r14, r24
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	f8 06       	cpc	r15, r24
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	08 07       	cpc	r16, r24
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	18 07       	cpc	r17, r24
    31b6:	88 f4       	brcc	.+34     	; 0x31da <__clzsi2+0x40>
    31b8:	8f ef       	ldi	r24, 0xFF	; 255
    31ba:	e8 16       	cp	r14, r24
    31bc:	f1 04       	cpc	r15, r1
    31be:	01 05       	cpc	r16, r1
    31c0:	11 05       	cpc	r17, r1
    31c2:	31 f0       	breq	.+12     	; 0x31d0 <__clzsi2+0x36>
    31c4:	28 f0       	brcs	.+10     	; 0x31d0 <__clzsi2+0x36>
    31c6:	88 e0       	ldi	r24, 0x08	; 8
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	17 c0       	rjmp	.+46     	; 0x31fe <__clzsi2+0x64>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a0 e0       	ldi	r26, 0x00	; 0
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	12 c0       	rjmp	.+36     	; 0x31fe <__clzsi2+0x64>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	e8 16       	cp	r14, r24
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	f8 06       	cpc	r15, r24
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	08 07       	cpc	r16, r24
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	18 07       	cpc	r17, r24
    31ea:	28 f0       	brcs	.+10     	; 0x31f6 <__clzsi2+0x5c>
    31ec:	88 e1       	ldi	r24, 0x18	; 24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	a0 e0       	ldi	r26, 0x00	; 0
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <__clzsi2+0x64>
    31f6:	80 e1       	ldi	r24, 0x10	; 16
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	20 e2       	ldi	r18, 0x20	; 32
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	28 1b       	sub	r18, r24
    3208:	39 0b       	sbc	r19, r25
    320a:	4a 0b       	sbc	r20, r26
    320c:	5b 0b       	sbc	r21, r27
    320e:	04 c0       	rjmp	.+8      	; 0x3218 <__clzsi2+0x7e>
    3210:	16 95       	lsr	r17
    3212:	07 95       	ror	r16
    3214:	f7 94       	ror	r15
    3216:	e7 94       	ror	r14
    3218:	8a 95       	dec	r24
    321a:	d2 f7       	brpl	.-12     	; 0x3210 <__clzsi2+0x76>
    321c:	f7 01       	movw	r30, r14
    321e:	e2 5f       	subi	r30, 0xF2	; 242
    3220:	fd 4f       	sbci	r31, 0xFD	; 253
    3222:	80 81       	ld	r24, Z
    3224:	28 1b       	sub	r18, r24
    3226:	31 09       	sbc	r19, r1
    3228:	41 09       	sbc	r20, r1
    322a:	51 09       	sbc	r21, r1
    322c:	c9 01       	movw	r24, r18
    322e:	1f 91       	pop	r17
    3230:	0f 91       	pop	r16
    3232:	ff 90       	pop	r15
    3234:	ef 90       	pop	r14
    3236:	08 95       	ret

00003238 <__pack_f>:
    3238:	df 92       	push	r13
    323a:	ef 92       	push	r14
    323c:	ff 92       	push	r15
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	fc 01       	movw	r30, r24
    3244:	e4 80       	ldd	r14, Z+4	; 0x04
    3246:	f5 80       	ldd	r15, Z+5	; 0x05
    3248:	06 81       	ldd	r16, Z+6	; 0x06
    324a:	17 81       	ldd	r17, Z+7	; 0x07
    324c:	d1 80       	ldd	r13, Z+1	; 0x01
    324e:	80 81       	ld	r24, Z
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	48 f4       	brcc	.+18     	; 0x3266 <__pack_f+0x2e>
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	a0 e1       	ldi	r26, 0x10	; 16
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e8 2a       	or	r14, r24
    325e:	f9 2a       	or	r15, r25
    3260:	0a 2b       	or	r16, r26
    3262:	1b 2b       	or	r17, r27
    3264:	a5 c0       	rjmp	.+330    	; 0x33b0 <__pack_f+0x178>
    3266:	84 30       	cpi	r24, 0x04	; 4
    3268:	09 f4       	brne	.+2      	; 0x326c <__pack_f+0x34>
    326a:	9f c0       	rjmp	.+318    	; 0x33aa <__pack_f+0x172>
    326c:	82 30       	cpi	r24, 0x02	; 2
    326e:	21 f4       	brne	.+8      	; 0x3278 <__pack_f+0x40>
    3270:	ee 24       	eor	r14, r14
    3272:	ff 24       	eor	r15, r15
    3274:	87 01       	movw	r16, r14
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <__pack_f+0x4a>
    3278:	e1 14       	cp	r14, r1
    327a:	f1 04       	cpc	r15, r1
    327c:	01 05       	cpc	r16, r1
    327e:	11 05       	cpc	r17, r1
    3280:	19 f4       	brne	.+6      	; 0x3288 <__pack_f+0x50>
    3282:	e0 e0       	ldi	r30, 0x00	; 0
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	96 c0       	rjmp	.+300    	; 0x33b4 <__pack_f+0x17c>
    3288:	62 81       	ldd	r22, Z+2	; 0x02
    328a:	73 81       	ldd	r23, Z+3	; 0x03
    328c:	9f ef       	ldi	r25, 0xFF	; 255
    328e:	62 38       	cpi	r22, 0x82	; 130
    3290:	79 07       	cpc	r23, r25
    3292:	0c f0       	brlt	.+2      	; 0x3296 <__pack_f+0x5e>
    3294:	5b c0       	rjmp	.+182    	; 0x334c <__pack_f+0x114>
    3296:	22 e8       	ldi	r18, 0x82	; 130
    3298:	3f ef       	ldi	r19, 0xFF	; 255
    329a:	26 1b       	sub	r18, r22
    329c:	37 0b       	sbc	r19, r23
    329e:	2a 31       	cpi	r18, 0x1A	; 26
    32a0:	31 05       	cpc	r19, r1
    32a2:	2c f0       	brlt	.+10     	; 0x32ae <__pack_f+0x76>
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	50 e0       	ldi	r21, 0x00	; 0
    32ac:	2a c0       	rjmp	.+84     	; 0x3302 <__pack_f+0xca>
    32ae:	b8 01       	movw	r22, r16
    32b0:	a7 01       	movw	r20, r14
    32b2:	02 2e       	mov	r0, r18
    32b4:	04 c0       	rjmp	.+8      	; 0x32be <__pack_f+0x86>
    32b6:	76 95       	lsr	r23
    32b8:	67 95       	ror	r22
    32ba:	57 95       	ror	r21
    32bc:	47 95       	ror	r20
    32be:	0a 94       	dec	r0
    32c0:	d2 f7       	brpl	.-12     	; 0x32b6 <__pack_f+0x7e>
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a0 e0       	ldi	r26, 0x00	; 0
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <__pack_f+0x9c>
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	aa 1f       	adc	r26, r26
    32d2:	bb 1f       	adc	r27, r27
    32d4:	2a 95       	dec	r18
    32d6:	d2 f7       	brpl	.-12     	; 0x32cc <__pack_f+0x94>
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	a1 09       	sbc	r26, r1
    32dc:	b1 09       	sbc	r27, r1
    32de:	8e 21       	and	r24, r14
    32e0:	9f 21       	and	r25, r15
    32e2:	a0 23       	and	r26, r16
    32e4:	b1 23       	and	r27, r17
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	a1 05       	cpc	r26, r1
    32ea:	b1 05       	cpc	r27, r1
    32ec:	21 f0       	breq	.+8      	; 0x32f6 <__pack_f+0xbe>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 e0       	ldi	r26, 0x00	; 0
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	9a 01       	movw	r18, r20
    32f8:	ab 01       	movw	r20, r22
    32fa:	28 2b       	or	r18, r24
    32fc:	39 2b       	or	r19, r25
    32fe:	4a 2b       	or	r20, r26
    3300:	5b 2b       	or	r21, r27
    3302:	da 01       	movw	r26, r20
    3304:	c9 01       	movw	r24, r18
    3306:	8f 77       	andi	r24, 0x7F	; 127
    3308:	90 70       	andi	r25, 0x00	; 0
    330a:	a0 70       	andi	r26, 0x00	; 0
    330c:	b0 70       	andi	r27, 0x00	; 0
    330e:	80 34       	cpi	r24, 0x40	; 64
    3310:	91 05       	cpc	r25, r1
    3312:	a1 05       	cpc	r26, r1
    3314:	b1 05       	cpc	r27, r1
    3316:	39 f4       	brne	.+14     	; 0x3326 <__pack_f+0xee>
    3318:	27 ff       	sbrs	r18, 7
    331a:	09 c0       	rjmp	.+18     	; 0x332e <__pack_f+0xf6>
    331c:	20 5c       	subi	r18, 0xC0	; 192
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	4f 4f       	sbci	r20, 0xFF	; 255
    3322:	5f 4f       	sbci	r21, 0xFF	; 255
    3324:	04 c0       	rjmp	.+8      	; 0x332e <__pack_f+0xf6>
    3326:	21 5c       	subi	r18, 0xC1	; 193
    3328:	3f 4f       	sbci	r19, 0xFF	; 255
    332a:	4f 4f       	sbci	r20, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	e0 e0       	ldi	r30, 0x00	; 0
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	20 30       	cpi	r18, 0x00	; 0
    3334:	a0 e0       	ldi	r26, 0x00	; 0
    3336:	3a 07       	cpc	r19, r26
    3338:	a0 e0       	ldi	r26, 0x00	; 0
    333a:	4a 07       	cpc	r20, r26
    333c:	a0 e4       	ldi	r26, 0x40	; 64
    333e:	5a 07       	cpc	r21, r26
    3340:	10 f0       	brcs	.+4      	; 0x3346 <__pack_f+0x10e>
    3342:	e1 e0       	ldi	r30, 0x01	; 1
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	79 01       	movw	r14, r18
    3348:	8a 01       	movw	r16, r20
    334a:	27 c0       	rjmp	.+78     	; 0x339a <__pack_f+0x162>
    334c:	60 38       	cpi	r22, 0x80	; 128
    334e:	71 05       	cpc	r23, r1
    3350:	64 f5       	brge	.+88     	; 0x33aa <__pack_f+0x172>
    3352:	fb 01       	movw	r30, r22
    3354:	e1 58       	subi	r30, 0x81	; 129
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	d8 01       	movw	r26, r16
    335a:	c7 01       	movw	r24, r14
    335c:	8f 77       	andi	r24, 0x7F	; 127
    335e:	90 70       	andi	r25, 0x00	; 0
    3360:	a0 70       	andi	r26, 0x00	; 0
    3362:	b0 70       	andi	r27, 0x00	; 0
    3364:	80 34       	cpi	r24, 0x40	; 64
    3366:	91 05       	cpc	r25, r1
    3368:	a1 05       	cpc	r26, r1
    336a:	b1 05       	cpc	r27, r1
    336c:	39 f4       	brne	.+14     	; 0x337c <__pack_f+0x144>
    336e:	e7 fe       	sbrs	r14, 7
    3370:	0d c0       	rjmp	.+26     	; 0x338c <__pack_f+0x154>
    3372:	80 e4       	ldi	r24, 0x40	; 64
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a0 e0       	ldi	r26, 0x00	; 0
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	04 c0       	rjmp	.+8      	; 0x3384 <__pack_f+0x14c>
    337c:	8f e3       	ldi	r24, 0x3F	; 63
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	a0 e0       	ldi	r26, 0x00	; 0
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e8 0e       	add	r14, r24
    3386:	f9 1e       	adc	r15, r25
    3388:	0a 1f       	adc	r16, r26
    338a:	1b 1f       	adc	r17, r27
    338c:	17 ff       	sbrs	r17, 7
    338e:	05 c0       	rjmp	.+10     	; 0x339a <__pack_f+0x162>
    3390:	16 95       	lsr	r17
    3392:	07 95       	ror	r16
    3394:	f7 94       	ror	r15
    3396:	e7 94       	ror	r14
    3398:	31 96       	adiw	r30, 0x01	; 1
    339a:	87 e0       	ldi	r24, 0x07	; 7
    339c:	16 95       	lsr	r17
    339e:	07 95       	ror	r16
    33a0:	f7 94       	ror	r15
    33a2:	e7 94       	ror	r14
    33a4:	8a 95       	dec	r24
    33a6:	d1 f7       	brne	.-12     	; 0x339c <__pack_f+0x164>
    33a8:	05 c0       	rjmp	.+10     	; 0x33b4 <__pack_f+0x17c>
    33aa:	ee 24       	eor	r14, r14
    33ac:	ff 24       	eor	r15, r15
    33ae:	87 01       	movw	r16, r14
    33b0:	ef ef       	ldi	r30, 0xFF	; 255
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	6e 2f       	mov	r22, r30
    33b6:	67 95       	ror	r22
    33b8:	66 27       	eor	r22, r22
    33ba:	67 95       	ror	r22
    33bc:	90 2f       	mov	r25, r16
    33be:	9f 77       	andi	r25, 0x7F	; 127
    33c0:	d7 94       	ror	r13
    33c2:	dd 24       	eor	r13, r13
    33c4:	d7 94       	ror	r13
    33c6:	8e 2f       	mov	r24, r30
    33c8:	86 95       	lsr	r24
    33ca:	49 2f       	mov	r20, r25
    33cc:	46 2b       	or	r20, r22
    33ce:	58 2f       	mov	r21, r24
    33d0:	5d 29       	or	r21, r13
    33d2:	b7 01       	movw	r22, r14
    33d4:	ca 01       	movw	r24, r20
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	df 90       	pop	r13
    33e0:	08 95       	ret

000033e2 <__unpack_f>:
    33e2:	fc 01       	movw	r30, r24
    33e4:	db 01       	movw	r26, r22
    33e6:	40 81       	ld	r20, Z
    33e8:	51 81       	ldd	r21, Z+1	; 0x01
    33ea:	22 81       	ldd	r18, Z+2	; 0x02
    33ec:	62 2f       	mov	r22, r18
    33ee:	6f 77       	andi	r22, 0x7F	; 127
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	22 1f       	adc	r18, r18
    33f4:	22 27       	eor	r18, r18
    33f6:	22 1f       	adc	r18, r18
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	89 2f       	mov	r24, r25
    33fc:	88 0f       	add	r24, r24
    33fe:	82 2b       	or	r24, r18
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	99 1f       	adc	r25, r25
    3406:	99 27       	eor	r25, r25
    3408:	99 1f       	adc	r25, r25
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	9c 93       	st	X, r25
    340e:	11 97       	sbiw	r26, 0x01	; 1
    3410:	21 15       	cp	r18, r1
    3412:	31 05       	cpc	r19, r1
    3414:	a9 f5       	brne	.+106    	; 0x3480 <__unpack_f+0x9e>
    3416:	41 15       	cp	r20, r1
    3418:	51 05       	cpc	r21, r1
    341a:	61 05       	cpc	r22, r1
    341c:	71 05       	cpc	r23, r1
    341e:	11 f4       	brne	.+4      	; 0x3424 <__unpack_f+0x42>
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	37 c0       	rjmp	.+110    	; 0x3492 <__unpack_f+0xb0>
    3424:	82 e8       	ldi	r24, 0x82	; 130
    3426:	9f ef       	ldi	r25, 0xFF	; 255
    3428:	13 96       	adiw	r26, 0x03	; 3
    342a:	9c 93       	st	X, r25
    342c:	8e 93       	st	-X, r24
    342e:	12 97       	sbiw	r26, 0x02	; 2
    3430:	9a 01       	movw	r18, r20
    3432:	ab 01       	movw	r20, r22
    3434:	67 e0       	ldi	r22, 0x07	; 7
    3436:	22 0f       	add	r18, r18
    3438:	33 1f       	adc	r19, r19
    343a:	44 1f       	adc	r20, r20
    343c:	55 1f       	adc	r21, r21
    343e:	6a 95       	dec	r22
    3440:	d1 f7       	brne	.-12     	; 0x3436 <__unpack_f+0x54>
    3442:	83 e0       	ldi	r24, 0x03	; 3
    3444:	8c 93       	st	X, r24
    3446:	0d c0       	rjmp	.+26     	; 0x3462 <__unpack_f+0x80>
    3448:	22 0f       	add	r18, r18
    344a:	33 1f       	adc	r19, r19
    344c:	44 1f       	adc	r20, r20
    344e:	55 1f       	adc	r21, r21
    3450:	12 96       	adiw	r26, 0x02	; 2
    3452:	8d 91       	ld	r24, X+
    3454:	9c 91       	ld	r25, X
    3456:	13 97       	sbiw	r26, 0x03	; 3
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	13 96       	adiw	r26, 0x03	; 3
    345c:	9c 93       	st	X, r25
    345e:	8e 93       	st	-X, r24
    3460:	12 97       	sbiw	r26, 0x02	; 2
    3462:	20 30       	cpi	r18, 0x00	; 0
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	38 07       	cpc	r19, r24
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	48 07       	cpc	r20, r24
    346c:	80 e4       	ldi	r24, 0x40	; 64
    346e:	58 07       	cpc	r21, r24
    3470:	58 f3       	brcs	.-42     	; 0x3448 <__unpack_f+0x66>
    3472:	14 96       	adiw	r26, 0x04	; 4
    3474:	2d 93       	st	X+, r18
    3476:	3d 93       	st	X+, r19
    3478:	4d 93       	st	X+, r20
    347a:	5c 93       	st	X, r21
    347c:	17 97       	sbiw	r26, 0x07	; 7
    347e:	08 95       	ret
    3480:	2f 3f       	cpi	r18, 0xFF	; 255
    3482:	31 05       	cpc	r19, r1
    3484:	79 f4       	brne	.+30     	; 0x34a4 <__unpack_f+0xc2>
    3486:	41 15       	cp	r20, r1
    3488:	51 05       	cpc	r21, r1
    348a:	61 05       	cpc	r22, r1
    348c:	71 05       	cpc	r23, r1
    348e:	19 f4       	brne	.+6      	; 0x3496 <__unpack_f+0xb4>
    3490:	84 e0       	ldi	r24, 0x04	; 4
    3492:	8c 93       	st	X, r24
    3494:	08 95       	ret
    3496:	64 ff       	sbrs	r22, 4
    3498:	03 c0       	rjmp	.+6      	; 0x34a0 <__unpack_f+0xbe>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	8c 93       	st	X, r24
    349e:	12 c0       	rjmp	.+36     	; 0x34c4 <__unpack_f+0xe2>
    34a0:	1c 92       	st	X, r1
    34a2:	10 c0       	rjmp	.+32     	; 0x34c4 <__unpack_f+0xe2>
    34a4:	2f 57       	subi	r18, 0x7F	; 127
    34a6:	30 40       	sbci	r19, 0x00	; 0
    34a8:	13 96       	adiw	r26, 0x03	; 3
    34aa:	3c 93       	st	X, r19
    34ac:	2e 93       	st	-X, r18
    34ae:	12 97       	sbiw	r26, 0x02	; 2
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	8c 93       	st	X, r24
    34b4:	87 e0       	ldi	r24, 0x07	; 7
    34b6:	44 0f       	add	r20, r20
    34b8:	55 1f       	adc	r21, r21
    34ba:	66 1f       	adc	r22, r22
    34bc:	77 1f       	adc	r23, r23
    34be:	8a 95       	dec	r24
    34c0:	d1 f7       	brne	.-12     	; 0x34b6 <__unpack_f+0xd4>
    34c2:	70 64       	ori	r23, 0x40	; 64
    34c4:	14 96       	adiw	r26, 0x04	; 4
    34c6:	4d 93       	st	X+, r20
    34c8:	5d 93       	st	X+, r21
    34ca:	6d 93       	st	X+, r22
    34cc:	7c 93       	st	X, r23
    34ce:	17 97       	sbiw	r26, 0x07	; 7
    34d0:	08 95       	ret

000034d2 <__fpcmp_parts_f>:
    34d2:	1f 93       	push	r17
    34d4:	dc 01       	movw	r26, r24
    34d6:	fb 01       	movw	r30, r22
    34d8:	9c 91       	ld	r25, X
    34da:	92 30       	cpi	r25, 0x02	; 2
    34dc:	08 f4       	brcc	.+2      	; 0x34e0 <__fpcmp_parts_f+0xe>
    34de:	47 c0       	rjmp	.+142    	; 0x356e <__fpcmp_parts_f+0x9c>
    34e0:	80 81       	ld	r24, Z
    34e2:	82 30       	cpi	r24, 0x02	; 2
    34e4:	08 f4       	brcc	.+2      	; 0x34e8 <__fpcmp_parts_f+0x16>
    34e6:	43 c0       	rjmp	.+134    	; 0x356e <__fpcmp_parts_f+0x9c>
    34e8:	94 30       	cpi	r25, 0x04	; 4
    34ea:	51 f4       	brne	.+20     	; 0x3500 <__fpcmp_parts_f+0x2e>
    34ec:	11 96       	adiw	r26, 0x01	; 1
    34ee:	1c 91       	ld	r17, X
    34f0:	84 30       	cpi	r24, 0x04	; 4
    34f2:	99 f5       	brne	.+102    	; 0x355a <__fpcmp_parts_f+0x88>
    34f4:	81 81       	ldd	r24, Z+1	; 0x01
    34f6:	68 2f       	mov	r22, r24
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	61 1b       	sub	r22, r17
    34fc:	71 09       	sbc	r23, r1
    34fe:	3f c0       	rjmp	.+126    	; 0x357e <__fpcmp_parts_f+0xac>
    3500:	84 30       	cpi	r24, 0x04	; 4
    3502:	21 f0       	breq	.+8      	; 0x350c <__fpcmp_parts_f+0x3a>
    3504:	92 30       	cpi	r25, 0x02	; 2
    3506:	31 f4       	brne	.+12     	; 0x3514 <__fpcmp_parts_f+0x42>
    3508:	82 30       	cpi	r24, 0x02	; 2
    350a:	b9 f1       	breq	.+110    	; 0x357a <__fpcmp_parts_f+0xa8>
    350c:	81 81       	ldd	r24, Z+1	; 0x01
    350e:	88 23       	and	r24, r24
    3510:	89 f1       	breq	.+98     	; 0x3574 <__fpcmp_parts_f+0xa2>
    3512:	2d c0       	rjmp	.+90     	; 0x356e <__fpcmp_parts_f+0x9c>
    3514:	11 96       	adiw	r26, 0x01	; 1
    3516:	1c 91       	ld	r17, X
    3518:	11 97       	sbiw	r26, 0x01	; 1
    351a:	82 30       	cpi	r24, 0x02	; 2
    351c:	f1 f0       	breq	.+60     	; 0x355a <__fpcmp_parts_f+0x88>
    351e:	81 81       	ldd	r24, Z+1	; 0x01
    3520:	18 17       	cp	r17, r24
    3522:	d9 f4       	brne	.+54     	; 0x355a <__fpcmp_parts_f+0x88>
    3524:	12 96       	adiw	r26, 0x02	; 2
    3526:	2d 91       	ld	r18, X+
    3528:	3c 91       	ld	r19, X
    352a:	13 97       	sbiw	r26, 0x03	; 3
    352c:	82 81       	ldd	r24, Z+2	; 0x02
    352e:	93 81       	ldd	r25, Z+3	; 0x03
    3530:	82 17       	cp	r24, r18
    3532:	93 07       	cpc	r25, r19
    3534:	94 f0       	brlt	.+36     	; 0x355a <__fpcmp_parts_f+0x88>
    3536:	28 17       	cp	r18, r24
    3538:	39 07       	cpc	r19, r25
    353a:	bc f0       	brlt	.+46     	; 0x356a <__fpcmp_parts_f+0x98>
    353c:	14 96       	adiw	r26, 0x04	; 4
    353e:	8d 91       	ld	r24, X+
    3540:	9d 91       	ld	r25, X+
    3542:	0d 90       	ld	r0, X+
    3544:	bc 91       	ld	r27, X
    3546:	a0 2d       	mov	r26, r0
    3548:	24 81       	ldd	r18, Z+4	; 0x04
    354a:	35 81       	ldd	r19, Z+5	; 0x05
    354c:	46 81       	ldd	r20, Z+6	; 0x06
    354e:	57 81       	ldd	r21, Z+7	; 0x07
    3550:	28 17       	cp	r18, r24
    3552:	39 07       	cpc	r19, r25
    3554:	4a 07       	cpc	r20, r26
    3556:	5b 07       	cpc	r21, r27
    3558:	18 f4       	brcc	.+6      	; 0x3560 <__fpcmp_parts_f+0x8e>
    355a:	11 23       	and	r17, r17
    355c:	41 f0       	breq	.+16     	; 0x356e <__fpcmp_parts_f+0x9c>
    355e:	0a c0       	rjmp	.+20     	; 0x3574 <__fpcmp_parts_f+0xa2>
    3560:	82 17       	cp	r24, r18
    3562:	93 07       	cpc	r25, r19
    3564:	a4 07       	cpc	r26, r20
    3566:	b5 07       	cpc	r27, r21
    3568:	40 f4       	brcc	.+16     	; 0x357a <__fpcmp_parts_f+0xa8>
    356a:	11 23       	and	r17, r17
    356c:	19 f0       	breq	.+6      	; 0x3574 <__fpcmp_parts_f+0xa2>
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	05 c0       	rjmp	.+10     	; 0x357e <__fpcmp_parts_f+0xac>
    3574:	6f ef       	ldi	r22, 0xFF	; 255
    3576:	7f ef       	ldi	r23, 0xFF	; 255
    3578:	02 c0       	rjmp	.+4      	; 0x357e <__fpcmp_parts_f+0xac>
    357a:	60 e0       	ldi	r22, 0x00	; 0
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	cb 01       	movw	r24, r22
    3580:	1f 91       	pop	r17
    3582:	08 95       	ret

00003584 <__udivmodhi4>:
    3584:	aa 1b       	sub	r26, r26
    3586:	bb 1b       	sub	r27, r27
    3588:	51 e1       	ldi	r21, 0x11	; 17
    358a:	07 c0       	rjmp	.+14     	; 0x359a <__udivmodhi4_ep>

0000358c <__udivmodhi4_loop>:
    358c:	aa 1f       	adc	r26, r26
    358e:	bb 1f       	adc	r27, r27
    3590:	a6 17       	cp	r26, r22
    3592:	b7 07       	cpc	r27, r23
    3594:	10 f0       	brcs	.+4      	; 0x359a <__udivmodhi4_ep>
    3596:	a6 1b       	sub	r26, r22
    3598:	b7 0b       	sbc	r27, r23

0000359a <__udivmodhi4_ep>:
    359a:	88 1f       	adc	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	5a 95       	dec	r21
    35a0:	a9 f7       	brne	.-22     	; 0x358c <__udivmodhi4_loop>
    35a2:	80 95       	com	r24
    35a4:	90 95       	com	r25
    35a6:	bc 01       	movw	r22, r24
    35a8:	cd 01       	movw	r24, r26
    35aa:	08 95       	ret

000035ac <__prologue_saves__>:
    35ac:	2f 92       	push	r2
    35ae:	3f 92       	push	r3
    35b0:	4f 92       	push	r4
    35b2:	5f 92       	push	r5
    35b4:	6f 92       	push	r6
    35b6:	7f 92       	push	r7
    35b8:	8f 92       	push	r8
    35ba:	9f 92       	push	r9
    35bc:	af 92       	push	r10
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	ca 1b       	sub	r28, r26
    35d6:	db 0b       	sbc	r29, r27
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	19 94       	eijmp

000035e4 <__epilogue_restores__>:
    35e4:	2a 88       	ldd	r2, Y+18	; 0x12
    35e6:	39 88       	ldd	r3, Y+17	; 0x11
    35e8:	48 88       	ldd	r4, Y+16	; 0x10
    35ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f6:	b9 84       	ldd	r11, Y+9	; 0x09
    35f8:	c8 84       	ldd	r12, Y+8	; 0x08
    35fa:	df 80       	ldd	r13, Y+7	; 0x07
    35fc:	ee 80       	ldd	r14, Y+6	; 0x06
    35fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3600:	0c 81       	ldd	r16, Y+4	; 0x04
    3602:	1b 81       	ldd	r17, Y+3	; 0x03
    3604:	aa 81       	ldd	r26, Y+2	; 0x02
    3606:	b9 81       	ldd	r27, Y+1	; 0x01
    3608:	ce 0f       	add	r28, r30
    360a:	d1 1d       	adc	r29, r1
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    3616:	ed 01       	movw	r28, r26
    3618:	08 95       	ret

0000361a <_exit>:
    361a:	f8 94       	cli

0000361c <__stop_program>:
    361c:	ff cf       	rjmp	.-2      	; 0x361c <__stop_program>
